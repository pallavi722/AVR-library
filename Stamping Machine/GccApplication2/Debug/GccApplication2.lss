
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002806  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00002806  000028ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000174  0080011e  0080011e  00002978  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00002978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000197c  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000084c  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015ba  00000000  00000000  00004c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000358  00000000  00000000  00006240  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000077b  00000000  00000000  00006598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006d6  00000000  00000000  00006d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  000073e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 06 	call	0xda4	; 0xda4 <main>
      8a:	0c 94 01 14 	jmp	0x2802	; 0x2802 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <saveeepromdata>:
uint16_t EEMEM eeprombyte1; 		
uint16_t EEMEM eeprombyte2;	
uint16_t EEMEM eeprombyte3;	

void saveeepromdata(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
//	eeprom_write_word(&eeprombyte0,3);
	eeprom_write_word(&eeprombyte1,3);
      9a:	63 e0       	ldi	r22, 0x03	; 3
      9c:	70 e0       	ldi	r23, 0x00	; 0
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	0e 94 df 13 	call	0x27be	; 0x27be <eeprom_write_word>
	eeprom_write_word(&eeprombyte2,11);
      a6:	6b e0       	ldi	r22, 0x0B	; 11
      a8:	70 e0       	ldi	r23, 0x00	; 0
      aa:	84 e0       	ldi	r24, 0x04	; 4
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 df 13 	call	0x27be	; 0x27be <eeprom_write_word>
	eeprom_write_word(&eeprombyte3,length);
      b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <length>
      b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <length+0x1>
      ba:	bc 01       	movw	r22, r24
      bc:	86 e0       	ldi	r24, 0x06	; 6
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 df 13 	call	0x27be	; 0x27be <eeprom_write_word>
}
      c4:	00 00       	nop
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <geteepromdata>:

void geteepromdata(void)
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
//	check0 				= eeprom_read_word(&eeprombyte0);
	check0 				= eeprom_read_word(&eeprombyte1);
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <eeprom_read_word>
      dc:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <check0>
	check1				= eeprom_read_word(&eeprombyte2);
      e0:	84 e0       	ldi	r24, 0x04	; 4
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <eeprom_read_word>
      e8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <check1>
	length				= eeprom_read_word(&eeprombyte3);
      ec:	86 e0       	ldi	r24, 0x06	; 6
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <eeprom_read_word>
      f4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <length+0x1>
      f8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <length>
}
      fc:	00 00       	nop
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <__vector_2>:

SIGNAL(INT1_vect)   //PD3
{
     104:	1f 92       	push	r1
     106:	0f 92       	push	r0
     108:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	4f 93       	push	r20
     116:	5f 93       	push	r21
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	ef 93       	push	r30
     11e:	ff 93       	push	r31
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
	switch(cd4046_run_mode)
     128:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <cd4046_run_mode>
     12c:	88 2f       	mov	r24, r24
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	91 05       	cpc	r25, r1
     134:	09 f4       	brne	.+2      	; 0x138 <__vector_2+0x34>
     136:	8d c0       	rjmp	.+282    	; 0x252 <__vector_2+0x14e>
     138:	82 30       	cpi	r24, 0x02	; 2
     13a:	91 05       	cpc	r25, r1
     13c:	1c f4       	brge	.+6      	; 0x144 <__vector_2+0x40>
     13e:	89 2b       	or	r24, r25
     140:	49 f0       	breq	.+18     	; 0x154 <__vector_2+0x50>
		}	//if(cd4046_motorrun==1)
		break;
		
		
	}	//switch(cd4046_run_mode)
}
     142:	d8 c1       	rjmp	.+944    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
	length				= eeprom_read_word(&eeprombyte3);
}

SIGNAL(INT1_vect)   //PD3
{
	switch(cd4046_run_mode)
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	91 05       	cpc	r25, r1
     148:	09 f4       	brne	.+2      	; 0x14c <__vector_2+0x48>
     14a:	20 c1       	rjmp	.+576    	; 0x38c <__vector_2+0x288>
     14c:	03 97       	sbiw	r24, 0x03	; 3
     14e:	09 f4       	brne	.+2      	; 0x152 <__vector_2+0x4e>
     150:	93 c1       	rjmp	.+806    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		}	//if(cd4046_motorrun==1)
		break;
		
		
	}	//switch(cd4046_run_mode)
}
     152:	d0 c1       	rjmp	.+928    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
SIGNAL(INT1_vect)   //PD3
{
	switch(cd4046_run_mode)
	{
		case 0: //calibrate
		if(cd4046_motorrun==1)
     154:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cd4046_motorrun>
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	09 f0       	breq	.+2      	; 0x15e <__vector_2+0x5a>
     15c:	c4 c1       	rjmp	.+904    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		{
			cd4046_ransteps++;
     15e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <cd4046_ransteps>
     162:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <cd4046_ransteps+0x1>
     16c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <cd4046_ransteps>
			switch(cd4046_motor_state)
     170:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	91 05       	cpc	r25, r1
     17c:	09 f1       	breq	.+66     	; 0x1c0 <__vector_2+0xbc>
     17e:	83 30       	cpi	r24, 0x03	; 3
     180:	91 05       	cpc	r25, r1
     182:	09 f4       	brne	.+2      	; 0x186 <__vector_2+0x82>
     184:	40 c0       	rjmp	.+128    	; 0x206 <__vector_2+0x102>
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	09 f0       	breq	.+2      	; 0x18c <__vector_2+0x88>
				}
				break; 
			}

		} //if(cd4046_motorrun==1)
		break;	
     18a:	ad c1       	rjmp	.+858    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		{
			cd4046_ransteps++;
			switch(cd4046_motor_state)
			{
				case 1: 
				if(OCR2==cd4046_max_speed_OCR)
     18c:	83 e4       	ldi	r24, 0x43	; 67
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	80 81       	ld	r24, Z
     194:	28 2f       	mov	r18, r24
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     19c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1a0:	28 17       	cp	r18, r24
     1a2:	39 07       	cpc	r19, r25
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <__vector_2+0xa4>
     1a6:	4f c0       	rjmp	.+158    	; 0x246 <__vector_2+0x142>
				{
					cd4046_acc_steps=cd4046_ransteps;
     1a8:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <cd4046_ransteps>
     1ac:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     1b0:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <cd4046_acc_steps+0x1>
     1b4:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <cd4046_acc_steps>
					cd4046_motor_state=STEADY;//2
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				}
				break;
     1be:	43 c0       	rjmp	.+134    	; 0x246 <__vector_2+0x142>
	
				case 2:
				if(OCR2==cd4046_max_speed_OCR&&cd4046_run==1)
     1c0:	83 e4       	ldi	r24, 0x43	; 67
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	80 81       	ld	r24, Z
     1c8:	28 2f       	mov	r18, r24
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1d4:	28 17       	cp	r18, r24
     1d6:	39 07       	cpc	r19, r25
     1d8:	71 f4       	brne	.+28     	; 0x1f6 <__vector_2+0xf2>
     1da:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <cd4046_run>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	51 f4       	brne	.+20     	; 0x1f6 <__vector_2+0xf2>
				{
					cd4046_const_steps++;
     1e2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cd4046_const_steps>
     1e6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cd4046_const_steps+0x1>
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cd4046_const_steps+0x1>
     1f0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cd4046_const_steps>
				}
				else
				if(cd4046_run==0)
				cd4046_motor_state=DECN;//3
				break;
     1f4:	2a c0       	rjmp	.+84     	; 0x24a <__vector_2+0x146>
				if(OCR2==cd4046_max_speed_OCR&&cd4046_run==1)
				{
					cd4046_const_steps++;
				}
				else
				if(cd4046_run==0)
     1f6:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <cd4046_run>
     1fa:	88 23       	and	r24, r24
     1fc:	31 f5       	brne	.+76     	; 0x24a <__vector_2+0x146>
				cd4046_motor_state=DECN;//3
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				break;
     204:	22 c0       	rjmp	.+68     	; 0x24a <__vector_2+0x146>
	
				case 3: 
				if(cd4046_run==0)
     206:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <cd4046_run>
     20a:	88 23       	and	r24, r24
     20c:	49 f4       	brne	.+18     	; 0x220 <__vector_2+0x11c>
				{
					cd4046_decn_steps++;
     20e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cd4046_decn_steps>
     212:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cd4046_decn_steps+0x1>
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cd4046_decn_steps+0x1>
     21c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cd4046_decn_steps>
				}
		
				if(OCR2==cd4046_min_speed_OCR)
     220:	83 e4       	ldi	r24, 0x43	; 67
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cd4046_min_speed_OCR>
     230:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cd4046_min_speed_OCR+0x1>
     234:	28 17       	cp	r18, r24
     236:	39 07       	cpc	r19, r25
     238:	51 f4       	brne	.+20     	; 0x24e <__vector_2+0x14a>
				{
					cd4046_motor_state=4;
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
					cd4046_motorrun=0;
     240:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cd4046_motorrun>
				}
				break; 
     244:	04 c0       	rjmp	.+8      	; 0x24e <__vector_2+0x14a>
				if(OCR2==cd4046_max_speed_OCR)
				{
					cd4046_acc_steps=cd4046_ransteps;
					cd4046_motor_state=STEADY;//2
				}
				break;
     246:	00 00       	nop
     248:	4e c1       	rjmp	.+668    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
					cd4046_const_steps++;
				}
				else
				if(cd4046_run==0)
				cd4046_motor_state=DECN;//3
				break;
     24a:	00 00       	nop
     24c:	4c c1       	rjmp	.+664    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
				if(OCR2==cd4046_min_speed_OCR)
				{
					cd4046_motor_state=4;
					cd4046_motorrun=0;
				}
				break; 
     24e:	00 00       	nop
			}

		} //if(cd4046_motorrun==1)
		break;	
     250:	4a c1       	rjmp	.+660    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		
		case 1://accn + const + decn
		if(cd4046_motorrun==1)
     252:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cd4046_motorrun>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	09 f0       	breq	.+2      	; 0x25c <__vector_2+0x158>
     25a:	47 c1       	rjmp	.+654    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
		{
			cd4046_ransteps++;
     25c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <cd4046_ransteps>
     260:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <cd4046_ransteps+0x1>
     26a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <cd4046_ransteps>
			//if (cd4046_runmotor==INDEXER)
			PORTC = PORTC ^ 0x04;//	PORTA ^= (1<<2);	// stepper pulse @ PC2
     26e:	85 e3       	ldi	r24, 0x35	; 53
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	25 e3       	ldi	r18, 0x35	; 53
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	30 81       	ld	r19, Z
     27a:	24 e0       	ldi	r18, 0x04	; 4
     27c:	23 27       	eor	r18, r19
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
// 			else
// 			if (cd4046_runmotor==PRESS)
		//	PORTC ^= (1<<5);//PORTC = PORTC ^ 0x20;		// stepper pulse @ P			
			switch(cd4046_motor_state)
     282:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     286:	88 2f       	mov	r24, r24
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	91 05       	cpc	r25, r1
     28e:	41 f1       	breq	.+80     	; 0x2e0 <__vector_2+0x1dc>
     290:	83 30       	cpi	r24, 0x03	; 3
     292:	91 05       	cpc	r25, r1
     294:	b9 f1       	breq	.+110    	; 0x304 <__vector_2+0x200>
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	09 f0       	breq	.+2      	; 0x29c <__vector_2+0x198>
						break;						
					}
				break;
			}
		}	//if(cd4046_motorrun==1)
		break;
     29a:	27 c1       	rjmp	.+590    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
// 			if (cd4046_runmotor==PRESS)
		//	PORTC ^= (1<<5);//PORTC = PORTC ^ 0x20;		// stepper pulse @ P			
			switch(cd4046_motor_state)
			{
				case 1:  //accn
				if(OCR2==cd4046_max_speed_OCR)
     29c:	83 e4       	ldi	r24, 0x43	; 67
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	28 2f       	mov	r18, r24
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2b0:	28 17       	cp	r18, r24
     2b2:	39 07       	cpc	r19, r25
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <__vector_2+0x1b4>
     2b6:	66 c0       	rjmp	.+204    	; 0x384 <__vector_2+0x280>
				{
					cd4046_decn_point=cd4046_setsteps-cd4046_decn_steps;
     2b8:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <cd4046_setsteps>
     2bc:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <cd4046_setsteps+0x1>
     2c0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cd4046_decn_steps>
     2c4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cd4046_decn_steps+0x1>
     2c8:	a9 01       	movw	r20, r18
     2ca:	48 1b       	sub	r20, r24
     2cc:	59 0b       	sbc	r21, r25
     2ce:	ca 01       	movw	r24, r20
     2d0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <cd4046_decn_point+0x1>
     2d4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <cd4046_decn_point>
					cd4046_motor_state=STEADY;
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				}
				break;
     2de:	52 c0       	rjmp	.+164    	; 0x384 <__vector_2+0x280>
				
				case 2: //steady
				if(cd4046_ransteps>=cd4046_decn_point)
     2e0:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <cd4046_ransteps>
     2e4:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     2e8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <cd4046_decn_point>
     2ec:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <cd4046_decn_point+0x1>
     2f0:	28 17       	cp	r18, r24
     2f2:	39 07       	cpc	r19, r25
     2f4:	08 f4       	brcc	.+2      	; 0x2f8 <__vector_2+0x1f4>
     2f6:	48 c0       	rjmp	.+144    	; 0x388 <__vector_2+0x284>
				{
					cd4046_run=0;
     2f8:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <cd4046_run>
					cd4046_motor_state=DECN;
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				}
				break;
     302:	42 c0       	rjmp	.+132    	; 0x388 <__vector_2+0x284>

				case 3:
					switch(cd4046_stop_on_signal)
     304:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cd4046_stop_on_signal>
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	00 97       	sbiw	r24, 0x00	; 0
     30e:	41 f1       	breq	.+80     	; 0x360 <__vector_2+0x25c>
     310:	02 97       	sbiw	r24, 0x02	; 2
     312:	09 f0       	breq	.+2      	; 0x316 <__vector_2+0x212>
							{
								cd4046_motorrun=0;
							}
						break;						
					}
				break;
     314:	3a c0       	rjmp	.+116    	; 0x38a <__vector_2+0x286>

				case 3:
					switch(cd4046_stop_on_signal)
					{
						case STOP_ON_INDEXER_SENSOR:
							if(CONVEYOR_POSITION_SENSOR==1||cd4046_sensed==1)
     316:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <cd4046_sensed>
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	79 f5       	brne	.+94     	; 0x37c <__vector_2+0x278>
							{
								cd4046_sensed=1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <cd4046_sensed>
								cd4046_offset_value--;
     324:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <cd4046_offset_value>
     328:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <cd4046_offset_value+0x1>
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <cd4046_offset_value+0x1>
     332:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <cd4046_offset_value>
								if (cd4046_offset_value<=0)
     336:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <cd4046_offset_value>
     33a:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <cd4046_offset_value+0x1>
     33e:	89 2b       	or	r24, r25
     340:	e9 f4       	brne	.+58     	; 0x37c <__vector_2+0x278>
								{
									cd4046_motorrun=0;
     342:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cd4046_motorrun>
									cd4046_stop_on_signal=STOP_ON_COUNT;
     346:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cd4046_stop_on_signal>
									cd4046_offset_value=cd4046_indexer_offset_value;
     34a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cd4046_indexer_offset_value>
     34e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cd4046_indexer_offset_value+0x1>
     352:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <cd4046_offset_value+0x1>
     356:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <cd4046_offset_value>
									cd4046_sensed=0;
     35a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <cd4046_sensed>
								}
							}						
						break;
     35e:	0e c0       	rjmp	.+28     	; 0x37c <__vector_2+0x278>
						
						case STOP_ON_COUNT:
							if(cd4046_ransteps>=cd4046_setsteps)
     360:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <cd4046_ransteps>
     364:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     368:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cd4046_setsteps>
     36c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cd4046_setsteps+0x1>
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	28 f0       	brcs	.+10     	; 0x380 <__vector_2+0x27c>
							{
								cd4046_motorrun=0;
     376:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cd4046_motorrun>
							}
						break;						
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__vector_2+0x27c>
									cd4046_stop_on_signal=STOP_ON_COUNT;
									cd4046_offset_value=cd4046_indexer_offset_value;
									cd4046_sensed=0;
								}
							}						
						break;
     37c:	00 00       	nop
     37e:	05 c0       	rjmp	.+10     	; 0x38a <__vector_2+0x286>
						case STOP_ON_COUNT:
							if(cd4046_ransteps>=cd4046_setsteps)
							{
								cd4046_motorrun=0;
							}
						break;						
     380:	00 00       	nop
					}
				break;
     382:	03 c0       	rjmp	.+6      	; 0x38a <__vector_2+0x286>
				if(OCR2==cd4046_max_speed_OCR)
				{
					cd4046_decn_point=cd4046_setsteps-cd4046_decn_steps;
					cd4046_motor_state=STEADY;
				}
				break;
     384:	00 00       	nop
     386:	b1 c0       	rjmp	.+354    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
				if(cd4046_ransteps>=cd4046_decn_point)
				{
					cd4046_run=0;
					cd4046_motor_state=DECN;
				}
				break;
     388:	00 00       	nop
						break;						
					}
				break;
			}
		}	//if(cd4046_motorrun==1)
		break;
     38a:	af c0       	rjmp	.+350    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
		
		case 2://accn && decn
		if(cd4046_motorrun==1)
     38c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cd4046_motorrun>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	09 f0       	breq	.+2      	; 0x396 <__vector_2+0x292>
     394:	ac c0       	rjmp	.+344    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		{
			cd4046_ransteps++;
     396:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <cd4046_ransteps>
     39a:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <cd4046_ransteps+0x1>
     3a4:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <cd4046_ransteps>
		//	if (cd4046_runmotor==INDEXER)
			PORTC = PORTC ^ 0x04;//	PORTA ^= (1<<2);	// stepper pulse @ PC2
     3a8:	85 e3       	ldi	r24, 0x35	; 53
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	25 e3       	ldi	r18, 0x35	; 53
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	30 81       	ld	r19, Z
     3b4:	24 e0       	ldi	r18, 0x04	; 4
     3b6:	23 27       	eor	r18, r19
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
// 			else
// 			if (cd4046_runmotor==PRESS)
// 			PORTC ^= (1<<5);//PORTC = PORTC ^ 0x20;		// stepper pulse @ PC5

			switch(cd4046_motor_state)
     3bc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	91 05       	cpc	r25, r1
     3c8:	19 f0       	breq	.+6      	; 0x3d0 <__vector_2+0x2cc>
     3ca:	02 97       	sbiw	r24, 0x02	; 2
     3cc:	99 f0       	breq	.+38     	; 0x3f4 <__vector_2+0x2f0>
						break;
					}
				break;
			}
		}	//if(cd4046_motorrun==1)
		break;		
     3ce:	8f c0       	rjmp	.+286    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
// 			PORTC ^= (1<<5);//PORTC = PORTC ^ 0x20;		// stepper pulse @ PC5

			switch(cd4046_motor_state)
			{
				case 1: //accn
				if(cd4046_ransteps>=cd4046_decn_point2)
     3d0:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <cd4046_ransteps>
     3d4:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     3d8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <cd4046_decn_point2>
     3dc:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <cd4046_decn_point2+0x1>
     3e0:	28 17       	cp	r18, r24
     3e2:	39 07       	cpc	r19, r25
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <__vector_2+0x2e4>
     3e6:	46 c0       	rjmp	.+140    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
				{
					cd4046_run=0;
     3e8:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <cd4046_run>
					cd4046_motor_state=STEADY;
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				}
				break;
     3f2:	40 c0       	rjmp	.+128    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>

				case 2:
					switch(cd4046_stop_on_signal)
     3f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cd4046_stop_on_signal>
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	41 f1       	breq	.+80     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     400:	02 97       	sbiw	r24, 0x02	; 2
     402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
						{
							cd4046_motorrun=0;
						}
						break;
					}
				break;
     404:	38 c0       	rjmp	.+112    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
						}
						break;*/
						
						case STOP_ON_INDEXER_SENSOR:
						
						if(CONVEYOR_POSITION_SENSOR==1||cd4046_sensed==1)
     406:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <cd4046_sensed>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	79 f5       	brne	.+94     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
						{
							cd4046_sensed=1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <cd4046_sensed>
							cd4046_offset_value--;
     414:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <cd4046_offset_value>
     418:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <cd4046_offset_value+0x1>
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <cd4046_offset_value+0x1>
     422:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <cd4046_offset_value>
							if (cd4046_offset_value<=0)
     426:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <cd4046_offset_value>
     42a:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <cd4046_offset_value+0x1>
     42e:	89 2b       	or	r24, r25
     430:	e9 f4       	brne	.+58     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
							{
								cd4046_motorrun=0;
     432:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cd4046_motorrun>
								cd4046_stop_on_signal=STOP_ON_COUNT;
     436:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cd4046_stop_on_signal>
								cd4046_offset_value=cd4046_indexer_offset_value;
     43a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cd4046_indexer_offset_value>
     43e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cd4046_indexer_offset_value+0x1>
     442:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <cd4046_offset_value+0x1>
     446:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <cd4046_offset_value>
								cd4046_sensed=0;
     44a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <cd4046_sensed>
							}
						}
							
						break;
     44e:	0e c0       	rjmp	.+28     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
						
						case STOP_ON_COUNT:
						if(cd4046_ransteps>=cd4046_setsteps)
     450:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <cd4046_ransteps>
     454:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <cd4046_ransteps+0x1>
     458:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cd4046_setsteps>
     45c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cd4046_setsteps+0x1>
     460:	28 17       	cp	r18, r24
     462:	39 07       	cpc	r19, r25
     464:	28 f0       	brcs	.+10     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
						{
							cd4046_motorrun=0;
     466:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cd4046_motorrun>
						}
						break;
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
								cd4046_offset_value=cd4046_indexer_offset_value;
								cd4046_sensed=0;
							}
						}
							
						break;
     46c:	00 00       	nop
     46e:	03 c0       	rjmp	.+6      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
						case STOP_ON_COUNT:
						if(cd4046_ransteps>=cd4046_setsteps)
						{
							cd4046_motorrun=0;
						}
						break;
     470:	00 00       	nop
					}
				break;
     472:	01 c0       	rjmp	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
				if(cd4046_ransteps>=cd4046_decn_point2)
				{
					cd4046_run=0;
					cd4046_motor_state=STEADY;
				}
				break;
     474:	00 00       	nop
						break;
					}
				break;
			}
		}	//if(cd4046_motorrun==1)
		break;		
     476:	3b c0       	rjmp	.+118    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>

		case 3://freerun on input (jog)
		if(cd4046_motorrun==1)
     478:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cd4046_motorrun>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	c9 f5       	brne	.+114    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
		{
//			cd4046_ransteps++;
		//	if (cd4046_runmotor==INDEXER)
			PORTC = PORTC ^ 0x04;	//PORTA ^= (1<<2);	// stepper pulse @ PC2
     480:	85 e3       	ldi	r24, 0x35	; 53
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	25 e3       	ldi	r18, 0x35	; 53
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	30 81       	ld	r19, Z
     48c:	24 e0       	ldi	r18, 0x04	; 4
     48e:	23 27       	eor	r18, r19
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
// 			else
// 			if (cd4046_runmotor==PRESS)
// 			PORTC ^= (1<<5);//PORTC = PORTC ^ 0x20;		// stepper pulse @ PC5

			switch(cd4046_motor_state)
     494:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	91 05       	cpc	r25, r1
     4a0:	19 f0       	breq	.+6      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a2:	02 97       	sbiw	r24, 0x02	; 2
     4a4:	49 f0       	breq	.+18     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
				break;			
				
			}
			
		}	//if(cd4046_motorrun==1)
		break;
     4a6:	25 c0       	rjmp	.+74     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
// 			PORTC ^= (1<<5);//PORTC = PORTC ^ 0x20;		// stepper pulse @ PC5

			switch(cd4046_motor_state)
			{
				case 1:
				if(cd4046_run==0)
     4a8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <cd4046_run>
     4ac:	88 23       	and	r24, r24
     4ae:	b9 f4       	brne	.+46     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				{
					cd4046_motor_state=STEADY;
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				}
				break;
     4b6:	13 c0       	rjmp	.+38     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				
				case 2:
				if(OCR2==cd4046_min_speed_OCR)
     4b8:	83 e4       	ldi	r24, 0x43	; 67
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	fc 01       	movw	r30, r24
     4be:	80 81       	ld	r24, Z
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cd4046_min_speed_OCR>
     4c8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cd4046_min_speed_OCR+0x1>
     4cc:	28 17       	cp	r18, r24
     4ce:	39 07       	cpc	r19, r25
     4d0:	41 f4       	brne	.+16     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				{
					cd4046_motor_state=DECN;  //3
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
					cd4046_motorrun=0;
     4d8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cd4046_motorrun>
				}
				break;			
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				case 1:
				if(cd4046_run==0)
				{
					cd4046_motor_state=STEADY;
				}
				break;
     4de:	00 00       	nop
     4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
				if(OCR2==cd4046_min_speed_OCR)
				{
					cd4046_motor_state=DECN;  //3
					cd4046_motorrun=0;
				}
				break;			
     4e2:	00 00       	nop
				
			}
			
		}	//if(cd4046_motorrun==1)
		break;
     4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
				}
				break; 
			}

		} //if(cd4046_motorrun==1)
		break;	
     4e6:	00 00       	nop
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
						break;						
					}
				break;
			}
		}	//if(cd4046_motorrun==1)
		break;
     4ea:	00 00       	nop
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
						break;
					}
				break;
			}
		}	//if(cd4046_motorrun==1)
		break;		
     4ee:	00 00       	nop
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
				break;			
				
			}
			
		}	//if(cd4046_motorrun==1)
		break;
     4f2:	00 00       	nop
		
		
	}	//switch(cd4046_run_mode)
}
     4f4:	00 00       	nop
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	9f 91       	pop	r25
     500:	8f 91       	pop	r24
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	0f 90       	pop	r0
     50c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_10>:

SIGNAL (TIMER0_COMP_vect)    // handler for Output Compare 0 overflow interrupt
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	ef 93       	push	r30
     52c:	ff 93       	push	r31
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	if (cd4046_timer<65000)
     536:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cd4046_timer>
     53a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <cd4046_timer+0x1>
     53e:	88 3e       	cpi	r24, 0xE8	; 232
     540:	9d 4f       	sbci	r25, 0xFD	; 253
     542:	48 f4       	brcc	.+18     	; 0x556 <__vector_10+0x40>
	cd4046_timer++;
     544:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cd4046_timer>
     548:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <cd4046_timer+0x1>
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <cd4046_timer+0x1>
     552:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cd4046_timer>

	if (cd4046_run==1&&cd4046_timer>=cd4046_accn_value) //
     556:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <cd4046_run>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	19 f5       	brne	.+70     	; 0x5a4 <__vector_10+0x8e>
     55e:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <cd4046_timer>
     562:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <cd4046_timer+0x1>
     566:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cd4046_accn_value>
     56a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cd4046_accn_value+0x1>
     56e:	28 17       	cp	r18, r24
     570:	39 07       	cpc	r19, r25
     572:	c0 f0       	brcs	.+48     	; 0x5a4 <__vector_10+0x8e>
	{
		cd4046_timer=0;
     574:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cd4046_timer+0x1>
     578:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <cd4046_timer>
		if (OCR2<cd4046_max_speed_OCR)
     57c:	83 e4       	ldi	r24, 0x43	; 67
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	80 81       	ld	r24, Z
     584:	28 2f       	mov	r18, r24
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     58c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     590:	28 17       	cp	r18, r24
     592:	39 07       	cpc	r19, r25
     594:	38 f4       	brcc	.+14     	; 0x5a4 <__vector_10+0x8e>
		OCR2++;
     596:	83 e4       	ldi	r24, 0x43	; 67
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	fc 01       	movw	r30, r24
     59c:	20 81       	ld	r18, Z
     59e:	2f 5f       	subi	r18, 0xFF	; 255
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
	}

	if (cd4046_run==0&&cd4046_timer>=cd4046_accn_value)//=
     5a4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <cd4046_run>
     5a8:	88 23       	and	r24, r24
     5aa:	19 f5       	brne	.+70     	; 0x5f2 <__vector_10+0xdc>
     5ac:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <cd4046_timer>
     5b0:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <cd4046_timer+0x1>
     5b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cd4046_accn_value>
     5b8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cd4046_accn_value+0x1>
     5bc:	28 17       	cp	r18, r24
     5be:	39 07       	cpc	r19, r25
     5c0:	c0 f0       	brcs	.+48     	; 0x5f2 <__vector_10+0xdc>
	{
		cd4046_timer=0;
     5c2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cd4046_timer+0x1>
     5c6:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <cd4046_timer>
		if(OCR2>cd4046_min_speed_OCR)
     5ca:	83 e4       	ldi	r24, 0x43	; 67
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	28 2f       	mov	r18, r24
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cd4046_min_speed_OCR>
     5da:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cd4046_min_speed_OCR+0x1>
     5de:	82 17       	cp	r24, r18
     5e0:	93 07       	cpc	r25, r19
     5e2:	38 f4       	brcc	.+14     	; 0x5f2 <__vector_10+0xdc>
		OCR2--;
     5e4:	83 e4       	ldi	r24, 0x43	; 67
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 81       	ld	r18, Z
     5ec:	21 50       	subi	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	}

	if(run_pmdc_motor==1)
     5f2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <run_pmdc_motor>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	71 f5       	brne	.+92     	; 0x656 <__vector_10+0x140>
	{
		if (pmdc_motor_acc_decn_counter<100)
     5fa:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pmdc_motor_acc_decn_counter>
     5fe:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pmdc_motor_acc_decn_counter+0x1>
     602:	84 36       	cpi	r24, 0x64	; 100
     604:	91 05       	cpc	r25, r1
     606:	48 f4       	brcc	.+18     	; 0x61a <__vector_10+0x104>
		pmdc_motor_acc_decn_counter++;
     608:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pmdc_motor_acc_decn_counter>
     60c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pmdc_motor_acc_decn_counter+0x1>
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <pmdc_motor_acc_decn_counter+0x1>
     616:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <pmdc_motor_acc_decn_counter>
		
		if (OCR1B<255&&pmdc_motor_acc_decn_counter>99)
     61a:	88 e4       	ldi	r24, 0x48	; 72
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	91 81       	ldd	r25, Z+1	; 0x01
     624:	8f 3f       	cpi	r24, 0xFF	; 255
     626:	91 05       	cpc	r25, r1
     628:	38 f5       	brcc	.+78     	; 0x678 <__vector_10+0x162>
     62a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pmdc_motor_acc_decn_counter>
     62e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pmdc_motor_acc_decn_counter+0x1>
     632:	84 36       	cpi	r24, 0x64	; 100
     634:	91 05       	cpc	r25, r1
     636:	00 f1       	brcs	.+64     	; 0x678 <__vector_10+0x162>
		{
			OCR1B++;
     638:	88 e4       	ldi	r24, 0x48	; 72
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	fc 01       	movw	r30, r24
     63e:	20 81       	ld	r18, Z
     640:	31 81       	ldd	r19, Z+1	; 0x01
     642:	2f 5f       	subi	r18, 0xFF	; 255
     644:	3f 4f       	sbci	r19, 0xFF	; 255
     646:	fc 01       	movw	r30, r24
     648:	31 83       	std	Z+1, r19	; 0x01
     64a:	20 83       	st	Z, r18
			pmdc_motor_acc_decn_counter=0;
     64c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pmdc_motor_acc_decn_counter+0x1>
     650:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <pmdc_motor_acc_decn_counter>
     654:	11 c0       	rjmp	.+34     	; 0x678 <__vector_10+0x162>
		}
	}
	else
	{
		if (OCR1B>0)
     656:	88 e4       	ldi	r24, 0x48	; 72
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	89 2b       	or	r24, r25
     662:	51 f0       	breq	.+20     	; 0x678 <__vector_10+0x162>
		OCR1B--;		
     664:	88 e4       	ldi	r24, 0x48	; 72
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	31 81       	ldd	r19, Z+1	; 0x01
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	31 09       	sbc	r19, r1
     672:	fc 01       	movw	r30, r24
     674:	31 83       	std	Z+1, r19	; 0x01
     676:	20 83       	st	Z, r18
	}
	
	if (za>0)
     678:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <za>
     67c:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <za+0x1>
     680:	89 2b       	or	r24, r25
     682:	49 f0       	breq	.+18     	; 0x696 <__vector_10+0x180>
	{
		za--;
     684:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <za>
     688:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <za+0x1>
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <za+0x1>
     692:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <za>
	}

	if (zb>0)
     696:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <zb>
     69a:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <zb+0x1>
     69e:	89 2b       	or	r24, r25
     6a0:	49 f0       	breq	.+18     	; 0x6b4 <__vector_10+0x19e>
	{
		zb--;
     6a2:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <zb>
     6a6:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <zb+0x1>
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <zb+0x1>
     6b0:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <zb>
	}

	if (zc>0)
     6b4:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <zc>
     6b8:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <zc+0x1>
     6bc:	89 2b       	or	r24, r25
     6be:	49 f0       	breq	.+18     	; 0x6d2 <__vector_10+0x1bc>
	{
		zc--;
     6c0:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <zc>
     6c4:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <zc+0x1>
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <zc+0x1>
     6ce:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <zc>
	}
}
     6d2:	00 00       	nop
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	ff 91       	pop	r31
     6da:	ef 91       	pop	r30
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	3f 91       	pop	r19
     6e2:	2f 91       	pop	r18
     6e4:	0f 90       	pop	r0
     6e6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <calibrating_cycle>:

void calibrating_cycle(void)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
	if (cd4046_a==1&&cd4046_ra==0)
     6f8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <cd4046_a>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	99 f4       	brne	.+38     	; 0x726 <calibrating_cycle+0x36>
     700:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cd4046_ra>
     704:	88 23       	and	r24, r24
     706:	79 f4       	brne	.+30     	; 0x726 <calibrating_cycle+0x36>
	{
		cd4046_run=1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <cd4046_run>
		cd4046_motor_state=ACCN;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
		cd4046_motorrun=1;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <cd4046_motorrun>
		cd4046_a=2;
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <cd4046_a>
		cd4046_ra=1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <cd4046_ra>
	}

	if (cd4046_a==2&&cd4046_ra==0)
     726:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <cd4046_a>
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	99 f4       	brne	.+38     	; 0x754 <calibrating_cycle+0x64>
     72e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cd4046_ra>
     732:	88 23       	and	r24, r24
     734:	79 f4       	brne	.+30     	; 0x754 <calibrating_cycle+0x64>
	{
		if(cd4046_const_steps>20000)
     736:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cd4046_const_steps>
     73a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cd4046_const_steps+0x1>
     73e:	81 32       	cpi	r24, 0x21	; 33
     740:	9e 44       	sbci	r25, 0x4E	; 78
     742:	28 f0       	brcs	.+10     	; 0x74e <calibrating_cycle+0x5e>
		{
			cd4046_a=3;
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <cd4046_a>
			cd4046_run=0;
     74a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <cd4046_run>
		}
		cd4046_ra=1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <cd4046_ra>
	}

	if (cd4046_a==3&&cd4046_ra==0)
     754:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <cd4046_a>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	71 f4       	brne	.+28     	; 0x778 <calibrating_cycle+0x88>
     75c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cd4046_ra>
     760:	88 23       	and	r24, r24
     762:	51 f4       	brne	.+20     	; 0x778 <calibrating_cycle+0x88>
	{
		if(cd4046_motor_state==4)
     764:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     768:	84 30       	cpi	r24, 0x04	; 4
     76a:	19 f4       	brne	.+6      	; 0x772 <calibrating_cycle+0x82>
		{
			cd4046_a=4;
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <cd4046_a>
			//save to eeprom not needed
		}
		cd4046_ra=1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <cd4046_ra>
	}

	if (cd4046_a==4&&cd4046_ra==0)
     778:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <cd4046_a>
     77c:	84 30       	cpi	r24, 0x04	; 4
     77e:	51 f4       	brne	.+20     	; 0x794 <calibrating_cycle+0xa4>
     780:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cd4046_ra>
     784:	88 23       	and	r24, r24
     786:	31 f4       	brne	.+12     	; 0x794 <calibrating_cycle+0xa4>
	{
		cd4046_a=5;
     788:	85 e0       	ldi	r24, 0x05	; 5
     78a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <cd4046_a>
		cd4046_ra=1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <cd4046_ra>
	}

	cd4046_ra=0;
     794:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <cd4046_ra>
}
     798:	00 00       	nop
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <runsteps>:

void runsteps(unsigned int steps)
{
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <runsteps+0xe>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
	cd4046_motor_state=ACCN;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	cd4046_ransteps=0;
     7bc:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <cd4046_ransteps+0x1>
     7c0:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <cd4046_ransteps>
	cd4046_setsteps=steps;
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <cd4046_setsteps+0x1>
     7cc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <cd4046_setsteps>
	if (cd4046_setsteps<=(cd4046_acc_steps+cd4046_decn_steps))
     7d0:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <cd4046_acc_steps>
     7d4:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <cd4046_acc_steps+0x1>
     7d8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cd4046_decn_steps>
     7dc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cd4046_decn_steps+0x1>
     7e0:	28 0f       	add	r18, r24
     7e2:	39 1f       	adc	r19, r25
     7e4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cd4046_setsteps>
     7e8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cd4046_setsteps+0x1>
     7ec:	28 17       	cp	r18, r24
     7ee:	39 07       	cpc	r19, r25
     7f0:	08 f4       	brcc	.+2      	; 0x7f4 <runsteps+0x54>
     7f2:	4a c0       	rjmp	.+148    	; 0x888 <__stack+0x29>
	{
		cd4046_run_mode=2;
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <cd4046_run_mode>
		cd4046_decn_point2=(float)cd4046_setsteps*cd4046_dec_percentage/1000;
     7fa:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cd4046_setsteps>
     7fe:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cd4046_setsteps+0x1>
     802:	cc 01       	movw	r24, r24
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
     810:	6b 01       	movw	r12, r22
     812:	7c 01       	movw	r14, r24
     814:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <cd4046_dec_percentage>
     818:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <cd4046_dec_percentage+0x1>
     81c:	cc 01       	movw	r24, r24
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	9c 01       	movw	r18, r24
     830:	ad 01       	movw	r20, r26
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 2c 13 	call	0x2658	; 0x2658 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	4a e7       	ldi	r20, 0x7A	; 122
     844:	54 e4       	ldi	r21, 0x44	; 68
     846:	bc 01       	movw	r22, r24
     848:	cd 01       	movw	r24, r26
     84a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__divsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <cd4046_decn_point2+0x1>
     862:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <cd4046_decn_point2>
		cd4046_decn_point2=cd4046_setsteps-cd4046_decn_point2;
     866:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <cd4046_setsteps>
     86a:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <cd4046_setsteps+0x1>
     86e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <cd4046_decn_point2>
     872:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <cd4046_decn_point2+0x1>
     876:	a9 01       	movw	r20, r18
     878:	48 1b       	sub	r20, r24
     87a:	59 0b       	sbc	r21, r25
     87c:	ca 01       	movw	r24, r20
     87e:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <cd4046_decn_point2+0x1>
     882:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <cd4046_decn_point2>
     886:	03 c0       	rjmp	.+6      	; 0x88e <__stack+0x2f>
	}
	else
	cd4046_run_mode=1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <cd4046_run_mode>
	
	cd4046_run=1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <cd4046_run>
	cd4046_motorrun=1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <cd4046_motorrun>
}
     89a:	00 00       	nop
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	08 95       	ret

000008ae <__vector_13>:

SIGNAL (USART_RXC_vect) // USART RX interrupt
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <__vector_13+0x1c>
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
	unsigned char in;
	in = UDR;
     8ce:	8c e2       	ldi	r24, 0x2C	; 44
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	8a 83       	std	Y+2, r24	; 0x02
	prog[j]=in;
     8d8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <j>
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	8d 5a       	subi	r24, 0xAD	; 173
     8e2:	9e 4f       	sbci	r25, 0xFE	; 254
     8e4:	2a 81       	ldd	r18, Y+2	; 0x02
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18

	if((j>4)&&(prog[0]==9&&prog[1]==8&&prog[2]==7&&prog[3]==6&&prog[4]==5&&prog[5]==4))
     8ea:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <j>
     8ee:	85 30       	cpi	r24, 0x05	; 5
     8f0:	78 f1       	brcs	.+94     	; 0x950 <__vector_13+0xa2>
     8f2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <prog>
     8f6:	89 30       	cpi	r24, 0x09	; 9
     8f8:	59 f5       	brne	.+86     	; 0x950 <__vector_13+0xa2>
     8fa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <prog+0x1>
     8fe:	88 30       	cpi	r24, 0x08	; 8
     900:	39 f5       	brne	.+78     	; 0x950 <__vector_13+0xa2>
     902:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <prog+0x2>
     906:	87 30       	cpi	r24, 0x07	; 7
     908:	19 f5       	brne	.+70     	; 0x950 <__vector_13+0xa2>
     90a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <prog+0x3>
     90e:	86 30       	cpi	r24, 0x06	; 6
     910:	f9 f4       	brne	.+62     	; 0x950 <__vector_13+0xa2>
     912:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <prog+0x4>
     916:	85 30       	cpi	r24, 0x05	; 5
     918:	d9 f4       	brne	.+54     	; 0x950 <__vector_13+0xa2>
     91a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <prog+0x5>
     91e:	84 30       	cpi	r24, 0x04	; 4
     920:	b9 f4       	brne	.+46     	; 0x950 <__vector_13+0xa2>
	{
		for(char i=0;i<10;i++)
     922:	19 82       	std	Y+1, r1	; 0x01
     924:	0a c0       	rjmp	.+20     	; 0x93a <__vector_13+0x8c>
		prog[i]=0;
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	8d 5a       	subi	r24, 0xAD	; 173
     92e:	9e 4f       	sbci	r25, 0xFE	; 254
     930:	fc 01       	movw	r30, r24
     932:	10 82       	st	Z, r1
	in = UDR;
	prog[j]=in;

	if((j>4)&&(prog[0]==9&&prog[1]==8&&prog[2]==7&&prog[3]==6&&prog[4]==5&&prog[5]==4))
	{
		for(char i=0;i<10;i++)
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	8a 30       	cpi	r24, 0x0A	; 10
     93e:	98 f3       	brcs	.-26     	; 0x926 <__vector_13+0x78>
		prog[i]=0;
		j=0;
     940:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <j>
		WDTCR = (1<<WDE)|(1<<WDP0);
     944:	81 e4       	ldi	r24, 0x41	; 65
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	29 e0       	ldi	r18, 0x09	; 9
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
		while(1)
		{}
     94e:	ff cf       	rjmp	.-2      	; 0x94e <__vector_13+0xa0>
	}
	
	if (j<5)
     950:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <j>
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	30 f4       	brcc	.+12     	; 0x964 <__vector_13+0xb6>
	j++;
     958:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <j>
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <j>
		prog[3]=prog[4];
		prog[4]=prog[5];
		prog[5]=0;
	}
	
}
     962:	16 c0       	rjmp	.+44     	; 0x990 <__vector_13+0xe2>
	
	if (j<5)
	j++;
	else
	{
		prog[0]=prog[1];
     964:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <prog+0x1>
     968:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <prog>
		prog[1]=prog[2];
     96c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <prog+0x2>
     970:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <prog+0x1>
		prog[2]=prog[3];
     974:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <prog+0x3>
     978:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <prog+0x2>
		prog[3]=prog[4];
     97c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <prog+0x4>
     980:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <prog+0x3>
		prog[4]=prog[5];
     984:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <prog+0x5>
     988:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <prog+0x4>
		prog[5]=0;
     98c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <prog+0x5>
	}
	
}
     990:	00 00       	nop
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <init_USART>:

void init_USART(void)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
	// set baud rate
	UBRRL = BAUD_PRESCALE;
     9b8:	89 e2       	ldi	r24, 0x29	; 41
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	27 e4       	ldi	r18, 0x47	; 71
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
	UBRRH = (BAUD_PRESCALE >> 8);
     9c2:	80 e4       	ldi	r24, 0x40	; 64
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	10 82       	st	Z, r1

	// Enable receiver and transmitter; enable RX interrupt, enable TX interrupt
	UCSRB = (1 << RXEN)| (1 << TXEN)| (1 << RXCIE); // | (1 << TXCIE);
     9ca:	8a e2       	ldi	r24, 0x2A	; 42
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	28 e9       	ldi	r18, 0x98	; 152
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18

	//asynchronous 8N1
	UCSRC = (1 << URSEL) | (3 << UCSZ0);//(1 << USBS) |
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	26 e8       	ldi	r18, 0x86	; 134
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
}
     9de:	00 00       	nop
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <dely>:

void dely(void)
{
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	63 97       	sbiw	r28, 0x13	; 19
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
 *
 */
static __inline__ void
_delay_cycles(const double __ticks_d)
{
    uint32_t __ticks = (uint32_t)(__ticks_d);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e8       	ldi	r25, 0x80	; 128
     9fe:	a8 e2       	ldi	r26, 0x28	; 40
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	ab 83       	std	Y+3, r26	; 0x03
     a08:	bc 83       	std	Y+4, r27	; 0x04

    /*
     * Special optimization for very
     * small delays - not using any register.
     */
    if( __ticks <= 12 )  {              /* this can be done with 4 opcodes      */
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	ab 81       	ldd	r26, Y+3	; 0x03
     a10:	bc 81       	ldd	r27, Y+4	; 0x04
     a12:	0d 97       	sbiw	r24, 0x0d	; 13
     a14:	a1 05       	cpc	r26, r1
     a16:	b1 05       	cpc	r27, r1
     a18:	48 f4       	brcc	.+18     	; 0xa2c <dely+0x46>
        __padding = __ticks;
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	ab 81       	ldd	r26, Y+3	; 0x03
     a20:	bc 81       	ldd	r27, Y+4	; 0x04
     a22:	8d 83       	std	Y+5, r24	; 0x05
     a24:	9e 83       	std	Y+6, r25	; 0x06
     a26:	af 83       	std	Y+7, r26	; 0x07
     a28:	b8 87       	std	Y+8, r27	; 0x08
     a2a:	cb c0       	rjmp	.+406    	; 0xbc2 <dely+0x1dc>

    /* create a single byte counter */
    } else if( __ticks <= 0x400 )  {
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	ab 81       	ldd	r26, Y+3	; 0x03
     a32:	bc 81       	ldd	r27, Y+4	; 0x04
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	94 40       	sbci	r25, 0x04	; 4
     a38:	a1 05       	cpc	r26, r1
     a3a:	b1 05       	cpc	r27, r1
     a3c:	c0 f5       	brcc	.+112    	; 0xaae <dely+0xc8>
        __ticks -= 1;                   /* caller needs 1 cycle to init counter */
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	ab 81       	ldd	r26, Y+3	; 0x03
     a44:	bc 81       	ldd	r27, Y+4	; 0x04
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	a1 09       	sbc	r26, r1
     a4a:	b1 09       	sbc	r27, r1
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	ab 83       	std	Y+3, r26	; 0x03
     a52:	bc 83       	std	Y+4, r27	; 0x04
        __loops = __ticks / 4;
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	ab 81       	ldd	r26, Y+3	; 0x03
     a5a:	bc 81       	ldd	r27, Y+4	; 0x04
     a5c:	b6 95       	lsr	r27
     a5e:	a7 95       	ror	r26
     a60:	97 95       	ror	r25
     a62:	87 95       	ror	r24
     a64:	b6 95       	lsr	r27
     a66:	a7 95       	ror	r26
     a68:	97 95       	ror	r25
     a6a:	87 95       	ror	r24
     a6c:	89 87       	std	Y+9, r24	; 0x09
     a6e:	9a 87       	std	Y+10, r25	; 0x0a
     a70:	ab 87       	std	Y+11, r26	; 0x0b
     a72:	bc 87       	std	Y+12, r27	; 0x0c
        __padding = __ticks % 4;
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	ab 81       	ldd	r26, Y+3	; 0x03
     a7a:	bc 81       	ldd	r27, Y+4	; 0x04
     a7c:	83 70       	andi	r24, 0x03	; 3
     a7e:	99 27       	eor	r25, r25
     a80:	aa 27       	eor	r26, r26
     a82:	bb 27       	eor	r27, r27
     a84:	8d 83       	std	Y+5, r24	; 0x05
     a86:	9e 83       	std	Y+6, r25	; 0x06
     a88:	af 83       	std	Y+7, r26	; 0x07
     a8a:	b8 87       	std	Y+8, r27	; 0x08
        if( __loops != 0 )
     a8c:	89 85       	ldd	r24, Y+9	; 0x09
     a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a90:	ab 85       	ldd	r26, Y+11	; 0x0b
     a92:	bc 85       	ldd	r27, Y+12	; 0x0c
     a94:	89 2b       	or	r24, r25
     a96:	8a 2b       	or	r24, r26
     a98:	8b 2b       	or	r24, r27
     a9a:	09 f4       	brne	.+2      	; 0xa9e <dely+0xb8>
     a9c:	92 c0       	rjmp	.+292    	; 0xbc2 <dely+0x1dc>
            _delay_loop_1_x( (uint8_t)__loops );
     a9e:	89 85       	ldd	r24, Y+9	; 0x09
     aa0:	8d 87       	std	Y+13, r24	; 0x0d
 *
 */
static __inline__ void      /* exactly 4 cycles/loop, max 2**8 loops */
_delay_loop_1_x( uint8_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
     aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     aa4:	8a 95       	dec	r24
     aa6:	01 f0       	breq	.+0      	; 0xaa8 <dely+0xc2>
     aa8:	e9 f7       	brne	.-6      	; 0xaa4 <dely+0xbe>
     aaa:	8d 87       	std	Y+13, r24	; 0x0d
     aac:	8a c0       	rjmp	.+276    	; 0xbc2 <dely+0x1dc>
        __padding = __ticks % 4;
        if( __loops != 0 )
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	9a 81       	ldd	r25, Y+2	; 0x02
     ab2:	ab 81       	ldd	r26, Y+3	; 0x03
     ab4:	bc 81       	ldd	r27, Y+4	; 0x04
     ab6:	02 97       	sbiw	r24, 0x02	; 2
     ab8:	a4 40       	sbci	r26, 0x04	; 4
     aba:	b1 05       	cpc	r27, r1
     abc:	08 f0       	brcs	.+2      	; 0xac0 <dely+0xda>
     abe:	3c c0       	rjmp	.+120    	; 0xb38 <dely+0x152>
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	ab 81       	ldd	r26, Y+3	; 0x03
     ac6:	bc 81       	ldd	r27, Y+4	; 0x04
     ac8:	02 97       	sbiw	r24, 0x02	; 2
     aca:	a1 09       	sbc	r26, r1
     acc:	b1 09       	sbc	r27, r1
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	9a 83       	std	Y+2, r25	; 0x02
     ad2:	ab 83       	std	Y+3, r26	; 0x03
     ad4:	bc 83       	std	Y+4, r27	; 0x04
        __loops = __ticks / 4;
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	ab 81       	ldd	r26, Y+3	; 0x03
     adc:	bc 81       	ldd	r27, Y+4	; 0x04
     ade:	b6 95       	lsr	r27
     ae0:	a7 95       	ror	r26
     ae2:	97 95       	ror	r25
     ae4:	87 95       	ror	r24
     ae6:	b6 95       	lsr	r27
     ae8:	a7 95       	ror	r26
     aea:	97 95       	ror	r25
     aec:	87 95       	ror	r24
     aee:	89 87       	std	Y+9, r24	; 0x09
     af0:	9a 87       	std	Y+10, r25	; 0x0a
     af2:	ab 87       	std	Y+11, r26	; 0x0b
     af4:	bc 87       	std	Y+12, r27	; 0x0c
        __padding = __ticks % 4;
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	ab 81       	ldd	r26, Y+3	; 0x03
     afc:	bc 81       	ldd	r27, Y+4	; 0x04
     afe:	83 70       	andi	r24, 0x03	; 3
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	8d 83       	std	Y+5, r24	; 0x05
     b08:	9e 83       	std	Y+6, r25	; 0x06
     b0a:	af 83       	std	Y+7, r26	; 0x07
     b0c:	b8 87       	std	Y+8, r27	; 0x08
        if( __loops != 0 )
     b0e:	89 85       	ldd	r24, Y+9	; 0x09
     b10:	9a 85       	ldd	r25, Y+10	; 0x0a
     b12:	ab 85       	ldd	r26, Y+11	; 0x0b
     b14:	bc 85       	ldd	r27, Y+12	; 0x0c
     b16:	89 2b       	or	r24, r25
     b18:	8a 2b       	or	r24, r26
     b1a:	8b 2b       	or	r24, r27
     b1c:	09 f4       	brne	.+2      	; 0xb20 <dely+0x13a>
     b1e:	51 c0       	rjmp	.+162    	; 0xbc2 <dely+0x1dc>
            _delay_loop_2_x( (uint16_t)__loops );
     b20:	89 85       	ldd	r24, Y+9	; 0x09
     b22:	9a 85       	ldd	r25, Y+10	; 0x0a
     b24:	9f 87       	std	Y+15, r25	; 0x0f
     b26:	8e 87       	std	Y+14, r24	; 0x0e
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
     b28:	8e 85       	ldd	r24, Y+14	; 0x0e
     b2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <dely+0x146>
     b30:	00 00       	nop
     b32:	9f 87       	std	Y+15, r25	; 0x0f
     b34:	8e 87       	std	Y+14, r24	; 0x0e
     b36:	45 c0       	rjmp	.+138    	; 0xbc2 <dely+0x1dc>
        if( __loops != 0 )
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	ab 81       	ldd	r26, Y+3	; 0x03
     b3e:	bc 81       	ldd	r27, Y+4	; 0x04
     b40:	04 97       	sbiw	r24, 0x04	; 4
     b42:	a1 09       	sbc	r26, r1
     b44:	b1 09       	sbc	r27, r1
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	9a 83       	std	Y+2, r25	; 0x02
     b4a:	ab 83       	std	Y+3, r26	; 0x03
     b4c:	bc 83       	std	Y+4, r27	; 0x04
        __loops = __ticks / 8;
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	ab 81       	ldd	r26, Y+3	; 0x03
     b54:	bc 81       	ldd	r27, Y+4	; 0x04
     b56:	68 94       	set
     b58:	12 f8       	bld	r1, 2
     b5a:	b6 95       	lsr	r27
     b5c:	a7 95       	ror	r26
     b5e:	97 95       	ror	r25
     b60:	87 95       	ror	r24
     b62:	16 94       	lsr	r1
     b64:	d1 f7       	brne	.-12     	; 0xb5a <dely+0x174>
     b66:	89 87       	std	Y+9, r24	; 0x09
     b68:	9a 87       	std	Y+10, r25	; 0x0a
     b6a:	ab 87       	std	Y+11, r26	; 0x0b
     b6c:	bc 87       	std	Y+12, r27	; 0x0c
        __padding = __ticks % 8;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	ab 81       	ldd	r26, Y+3	; 0x03
     b74:	bc 81       	ldd	r27, Y+4	; 0x04
     b76:	87 70       	andi	r24, 0x07	; 7
     b78:	99 27       	eor	r25, r25
     b7a:	aa 27       	eor	r26, r26
     b7c:	bb 27       	eor	r27, r27
     b7e:	8d 83       	std	Y+5, r24	; 0x05
     b80:	9e 83       	std	Y+6, r25	; 0x06
     b82:	af 83       	std	Y+7, r26	; 0x07
     b84:	b8 87       	std	Y+8, r27	; 0x08
        if( __loops != 0 )
     b86:	89 85       	ldd	r24, Y+9	; 0x09
     b88:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8a:	ab 85       	ldd	r26, Y+11	; 0x0b
     b8c:	bc 85       	ldd	r27, Y+12	; 0x0c
     b8e:	89 2b       	or	r24, r25
     b90:	8a 2b       	or	r24, r26
     b92:	8b 2b       	or	r24, r27
     b94:	b1 f0       	breq	.+44     	; 0xbc2 <dely+0x1dc>
     b96:	89 85       	ldd	r24, Y+9	; 0x09
     b98:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9a:	ab 85       	ldd	r26, Y+11	; 0x0b
     b9c:	bc 85       	ldd	r27, Y+12	; 0x0c
     b9e:	88 8b       	std	Y+16, r24	; 0x10
     ba0:	99 8b       	std	Y+17, r25	; 0x11
     ba2:	aa 8b       	std	Y+18, r26	; 0x12
     ba4:	bb 8b       	std	Y+19, r27	; 0x13
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
     ba6:	88 89       	ldd	r24, Y+16	; 0x10
     ba8:	99 89       	ldd	r25, Y+17	; 0x11
     baa:	aa 89       	ldd	r26, Y+18	; 0x12
     bac:	bb 89       	ldd	r27, Y+19	; 0x13
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	a1 09       	sbc	r26, r1
     bb2:	b1 09       	sbc	r27, r1
     bb4:	00 00       	nop
     bb6:	01 f0       	breq	.+0      	; 0xbb8 <dely+0x1d2>
     bb8:	d1 f7       	brne	.-12     	; 0xbae <dely+0x1c8>
     bba:	88 8b       	std	Y+16, r24	; 0x10
     bbc:	99 8b       	std	Y+17, r25	; 0x11
     bbe:	aa 8b       	std	Y+18, r26	; 0x12
     bc0:	bb 8b       	std	Y+19, r27	; 0x13
        __padding = __ticks % 8;
        if( __loops != 0 )
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
     bc2:	8d 81       	ldd	r24, Y+5	; 0x05
     bc4:	9e 81       	ldd	r25, Y+6	; 0x06
     bc6:	af 81       	ldd	r26, Y+7	; 0x07
     bc8:	b8 85       	ldd	r27, Y+8	; 0x08
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <dely+0x1ee>
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
     bd2:	00 00       	nop
        if( __loops != 0 )
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
     bd4:	8d 81       	ldd	r24, Y+5	; 0x05
     bd6:	9e 81       	ldd	r25, Y+6	; 0x06
     bd8:	af 81       	ldd	r26, Y+7	; 0x07
     bda:	b8 85       	ldd	r27, Y+8	; 0x08
     bdc:	02 97       	sbiw	r24, 0x02	; 2
     bde:	a1 05       	cpc	r26, r1
     be0:	b1 05       	cpc	r27, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <dely+0x200>
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <dely+0x200>
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	9e 81       	ldd	r25, Y+6	; 0x06
     bea:	af 81       	ldd	r26, Y+7	; 0x07
     bec:	b8 85       	ldd	r27, Y+8	; 0x08
     bee:	03 97       	sbiw	r24, 0x03	; 3
     bf0:	a1 05       	cpc	r26, r1
     bf2:	b1 05       	cpc	r27, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <dely+0x212>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     bf6:	c8 95       	lpm
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
     bf8:	8d 81       	ldd	r24, Y+5	; 0x05
     bfa:	9e 81       	ldd	r25, Y+6	; 0x06
     bfc:	af 81       	ldd	r26, Y+7	; 0x07
     bfe:	b8 85       	ldd	r27, Y+8	; 0x08
     c00:	04 97       	sbiw	r24, 0x04	; 4
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	11 f4       	brne	.+4      	; 0xc0c <dely+0x226>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c08:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
     c0a:	00 00       	nop

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	af 81       	ldd	r26, Y+7	; 0x07
     c12:	b8 85       	ldd	r27, Y+8	; 0x08
     c14:	05 97       	sbiw	r24, 0x05	; 5
     c16:	a1 05       	cpc	r26, r1
     c18:	b1 05       	cpc	r27, r1
     c1a:	11 f4       	brne	.+4      	; 0xc20 <dely+0x23a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c1c:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <dely+0x23a>
    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	af 81       	ldd	r26, Y+7	; 0x07
     c26:	b8 85       	ldd	r27, Y+8	; 0x08
     c28:	06 97       	sbiw	r24, 0x06	; 6
     c2a:	a1 05       	cpc	r26, r1
     c2c:	b1 05       	cpc	r27, r1
     c2e:	11 f4       	brne	.+4      	; 0xc34 <dely+0x24e>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c30:	c8 95       	lpm
     c32:	c8 95       	lpm
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	af 81       	ldd	r26, Y+7	; 0x07
     c3a:	b8 85       	ldd	r27, Y+8	; 0x08
     c3c:	07 97       	sbiw	r24, 0x07	; 7
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <dely+0x264>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c44:	c8 95       	lpm
     c46:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
     c48:	00 00       	nop
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	af 81       	ldd	r26, Y+7	; 0x07
     c50:	b8 85       	ldd	r27, Y+8	; 0x08
     c52:	08 97       	sbiw	r24, 0x08	; 8
     c54:	a1 05       	cpc	r26, r1
     c56:	b1 05       	cpc	r27, r1
     c58:	19 f4       	brne	.+6      	; 0xc60 <dely+0x27a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c5a:	c8 95       	lpm
     c5c:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <dely+0x27a>
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	af 81       	ldd	r26, Y+7	; 0x07
     c66:	b8 85       	ldd	r27, Y+8	; 0x08
     c68:	09 97       	sbiw	r24, 0x09	; 9
     c6a:	a1 05       	cpc	r26, r1
     c6c:	b1 05       	cpc	r27, r1
     c6e:	19 f4       	brne	.+6      	; 0xc76 <dely+0x290>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c70:	c8 95       	lpm
     c72:	c8 95       	lpm
     c74:	c8 95       	lpm
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	af 81       	ldd	r26, Y+7	; 0x07
     c7c:	b8 85       	ldd	r27, Y+8	; 0x08
     c7e:	0a 97       	sbiw	r24, 0x0a	; 10
     c80:	a1 05       	cpc	r26, r1
     c82:	b1 05       	cpc	r27, r1
     c84:	21 f4       	brne	.+8      	; 0xc8e <dely+0x2a8>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c86:	c8 95       	lpm
     c88:	c8 95       	lpm
     c8a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
     c8c:	00 00       	nop
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    if( __padding == 11 ) _NOP11();
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	af 81       	ldd	r26, Y+7	; 0x07
     c94:	b8 85       	ldd	r27, Y+8	; 0x08
     c96:	0b 97       	sbiw	r24, 0x0b	; 11
     c98:	a1 05       	cpc	r26, r1
     c9a:	b1 05       	cpc	r27, r1
     c9c:	21 f4       	brne	.+8      	; 0xca6 <dely+0x2c0>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     c9e:	c8 95       	lpm
     ca0:	c8 95       	lpm
     ca2:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <dely+0x2c0>
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    if( __padding == 11 ) _NOP11();
    if( __padding == 12 ) _NOP12();
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	af 81       	ldd	r26, Y+7	; 0x07
     cac:	b8 85       	ldd	r27, Y+8	; 0x08
     cae:	0c 97       	sbiw	r24, 0x0c	; 12
     cb0:	a1 05       	cpc	r26, r1
     cb2:	b1 05       	cpc	r27, r1
     cb4:	21 f4       	brne	.+8      	; 0xcbe <dely+0x2d8>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
     cb6:	c8 95       	lpm
     cb8:	c8 95       	lpm
     cba:	c8 95       	lpm
     cbc:	c8 95       	lpm
	_delay_ms(240);
}
     cbe:	00 00       	nop
     cc0:	63 96       	adiw	r28, 0x13	; 19
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <uppress>:

void uppress(void)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
	changed=1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <changed>
	if (keypresscounter<50)
     ce0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
     ce4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
     ce8:	c2 97       	sbiw	r24, 0x32	; 50
     cea:	4c f4       	brge	.+18     	; 0xcfe <uppress+0x2c>
	keypresscounter++;
     cec:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
     cf0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <keypresscounter+0x1>
     cfa:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <keypresscounter>
	if (menu==1)
     cfe:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	b9 f4       	brne	.+46     	; 0xd34 <uppress+0x62>
	{
		if (temp_length>999)
     d06:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <temp_length>
     d0a:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <temp_length+0x1>
     d0e:	88 3e       	cpi	r24, 0xE8	; 232
     d10:	93 40       	sbci	r25, 0x03	; 3
     d12:	20 f0       	brcs	.+8      	; 0xd1c <uppress+0x4a>
		{refreshval=1;}
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refreshval>
		{
			temp_length++;
			refreshval=1;
		}
	}
}
     d1a:	0c c0       	rjmp	.+24     	; 0xd34 <uppress+0x62>
	{
		if (temp_length>999)
		{refreshval=1;}
		else
		{
			temp_length++;
     d1c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <temp_length>
     d20:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <temp_length+0x1>
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <temp_length+0x1>
     d2a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <temp_length>
			refreshval=1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refreshval>
		}
	}
}
     d34:	00 00       	nop
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <downpress>:

void downpress(void)
{
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	changed=1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <changed>
	if (keypresscounter<50)
     d4a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
     d4e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
     d52:	c2 97       	sbiw	r24, 0x32	; 50
     d54:	4c f4       	brge	.+18     	; 0xd68 <downpress+0x2c>
	keypresscounter++;
     d56:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
     d5a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <keypresscounter+0x1>
     d64:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <keypresscounter>
	if (menu==1)
     d68:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	b1 f4       	brne	.+44     	; 0xd9c <downpress+0x60>
	{
		if (temp_length<11)
     d70:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <temp_length>
     d74:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <temp_length+0x1>
     d78:	0b 97       	sbiw	r24, 0x0b	; 11
     d7a:	20 f4       	brcc	.+8      	; 0xd84 <downpress+0x48>
		{refreshval=1;}
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refreshval>
		{
			temp_length--;
			refreshval=1;
		}
	}
}
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <downpress+0x60>
	{
		if (temp_length<11)
		{refreshval=1;}
		else
		{
			temp_length--;
     d84:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <temp_length>
     d88:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <temp_length+0x1>
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <temp_length+0x1>
     d92:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <temp_length>
			refreshval=1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refreshval>
		}
	}
}
     d9c:	00 00       	nop
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <main>:

int main(void)
{
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	ef 97       	sbiw	r28, 0x3f	; 63
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
	unsigned int buffer[20];
	DDRA  = 0b00000000;	  // PA0 is analog input for KEYPAD
     dc4:	8a e3       	ldi	r24, 0x3A	; 58
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	10 82       	st	Z, r1
	PORTA = 0b11111110;  //
     dcc:	8b e3       	ldi	r24, 0x3B	; 59
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	2e ef       	ldi	r18, 0xFE	; 254
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18

	//PORTB connects to LCD
	PORTB|= (1<<PB2);  // For LCD Backlight
     dd6:	88 e3       	ldi	r24, 0x38	; 56
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	28 e3       	ldi	r18, 0x38	; 56
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	20 81       	ld	r18, Z
     de2:	24 60       	ori	r18, 0x04	; 4
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18

	DDRC  = 0b00001100;	      // PC2 - Stepper Pulse, PC3-Stamping Motor, PC4- not used, PC5, PC6 & PC7 inputs from sensors
     de8:	84 e3       	ldi	r24, 0x34	; 52
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	2c e0       	ldi	r18, 0x0C	; 12
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	PORTC = 0b11110000;       //
     df2:	85 e3       	ldi	r24, 0x35	; 53
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	20 ef       	ldi	r18, 0xF0	; 240
     df8:	fc 01       	movw	r30, r24
     dfa:	20 83       	st	Z, r18

	DDRD  = 0b10010000;	  // PD0&PD1: Rx and Tx for bootloading, PD2-Start, PD3-Int from CD4046, PD4-Output PWM for PMDC motor
     dfc:	81 e3       	ldi	r24, 0x31	; 49
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	20 e9       	ldi	r18, 0x90	; 144
     e02:	fc 01       	movw	r30, r24
     e04:	20 83       	st	Z, r18
	PORTD = 0b01101111;   // PD5-stop PB, PD6-Homing sensor, PD7-PWM to CD4046
     e06:	82 e3       	ldi	r24, 0x32	; 50
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	2f e6       	ldi	r18, 0x6F	; 111
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18

	sei();
     e10:	78 94       	sei
	init_USART();
     e12:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <init_USART>
	
	lcd_init();
     e16:	0e 94 02 11 	call	0x2204	; 0x2204 <lcd_init>
	lcd_clrscr();
     e1a:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>
	lcd_gotoxy(0,0);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
	lcd_puts("   Paper Stamping  ");
     e26:	82 e7       	ldi	r24, 0x72	; 114
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
	lcd_gotoxy(0,1);
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
	lcd_puts("       Machine     ");
     e36:	86 e8       	ldi	r24, 0x86	; 134
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
	lcd_gotoxy(0,3);
     e3e:	63 e0       	ldi	r22, 0x03	; 3
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
	lcd_puts("        v1.0       ");	
     e46:	8a e9       	ldi	r24, 0x9A	; 154
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
 *
 */
static __inline__ void
_delay_cycles(const double __ticks_d)
{
    uint32_t __ticks = (uint32_t)(__ticks_d);
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 ee       	ldi	r25, 0xE0	; 224
     e52:	a0 e1       	ldi	r26, 0x10	; 16
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	af 83       	std	Y+7, r26	; 0x07
     e5c:	b8 87       	std	Y+8, r27	; 0x08

    /*
     * Special optimization for very
     * small delays - not using any register.
     */
    if( __ticks <= 12 )  {              /* this can be done with 4 opcodes      */
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	af 81       	ldd	r26, Y+7	; 0x07
     e64:	b8 85       	ldd	r27, Y+8	; 0x08
     e66:	0d 97       	sbiw	r24, 0x0d	; 13
     e68:	a1 05       	cpc	r26, r1
     e6a:	b1 05       	cpc	r27, r1
     e6c:	48 f4       	brcc	.+18     	; 0xe80 <main+0xdc>
        __padding = __ticks;
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	af 81       	ldd	r26, Y+7	; 0x07
     e74:	b8 85       	ldd	r27, Y+8	; 0x08
     e76:	89 87       	std	Y+9, r24	; 0x09
     e78:	9a 87       	std	Y+10, r25	; 0x0a
     e7a:	ab 87       	std	Y+11, r26	; 0x0b
     e7c:	bc 87       	std	Y+12, r27	; 0x0c
     e7e:	cb c0       	rjmp	.+406    	; 0x1016 <main+0x272>

    /* create a single byte counter */
    } else if( __ticks <= 0x400 )  {
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	af 81       	ldd	r26, Y+7	; 0x07
     e86:	b8 85       	ldd	r27, Y+8	; 0x08
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	94 40       	sbci	r25, 0x04	; 4
     e8c:	a1 05       	cpc	r26, r1
     e8e:	b1 05       	cpc	r27, r1
     e90:	c0 f5       	brcc	.+112    	; 0xf02 <main+0x15e>
        __ticks -= 1;                   /* caller needs 1 cycle to init counter */
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	af 81       	ldd	r26, Y+7	; 0x07
     e98:	b8 85       	ldd	r27, Y+8	; 0x08
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	a1 09       	sbc	r26, r1
     e9e:	b1 09       	sbc	r27, r1
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	af 83       	std	Y+7, r26	; 0x07
     ea6:	b8 87       	std	Y+8, r27	; 0x08
        __loops = __ticks / 4;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	af 81       	ldd	r26, Y+7	; 0x07
     eae:	b8 85       	ldd	r27, Y+8	; 0x08
     eb0:	b6 95       	lsr	r27
     eb2:	a7 95       	ror	r26
     eb4:	97 95       	ror	r25
     eb6:	87 95       	ror	r24
     eb8:	b6 95       	lsr	r27
     eba:	a7 95       	ror	r26
     ebc:	97 95       	ror	r25
     ebe:	87 95       	ror	r24
     ec0:	8d 87       	std	Y+13, r24	; 0x0d
     ec2:	9e 87       	std	Y+14, r25	; 0x0e
     ec4:	af 87       	std	Y+15, r26	; 0x0f
     ec6:	b8 8b       	std	Y+16, r27	; 0x10
        __padding = __ticks % 4;
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	af 81       	ldd	r26, Y+7	; 0x07
     ece:	b8 85       	ldd	r27, Y+8	; 0x08
     ed0:	83 70       	andi	r24, 0x03	; 3
     ed2:	99 27       	eor	r25, r25
     ed4:	aa 27       	eor	r26, r26
     ed6:	bb 27       	eor	r27, r27
     ed8:	89 87       	std	Y+9, r24	; 0x09
     eda:	9a 87       	std	Y+10, r25	; 0x0a
     edc:	ab 87       	std	Y+11, r26	; 0x0b
     ede:	bc 87       	std	Y+12, r27	; 0x0c
        if( __loops != 0 )
     ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee4:	af 85       	ldd	r26, Y+15	; 0x0f
     ee6:	b8 89       	ldd	r27, Y+16	; 0x10
     ee8:	89 2b       	or	r24, r25
     eea:	8a 2b       	or	r24, r26
     eec:	8b 2b       	or	r24, r27
     eee:	09 f4       	brne	.+2      	; 0xef2 <main+0x14e>
     ef0:	92 c0       	rjmp	.+292    	; 0x1016 <main+0x272>
            _delay_loop_1_x( (uint8_t)__loops );
     ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef4:	89 8b       	std	Y+17, r24	; 0x11
 *
 */
static __inline__ void      /* exactly 4 cycles/loop, max 2**8 loops */
_delay_loop_1_x( uint8_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
     ef6:	89 89       	ldd	r24, Y+17	; 0x11
     ef8:	8a 95       	dec	r24
     efa:	01 f0       	breq	.+0      	; 0xefc <main+0x158>
     efc:	e9 f7       	brne	.-6      	; 0xef8 <main+0x154>
     efe:	89 8b       	std	Y+17, r24	; 0x11
     f00:	8a c0       	rjmp	.+276    	; 0x1016 <main+0x272>
        __padding = __ticks % 4;
        if( __loops != 0 )
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	af 81       	ldd	r26, Y+7	; 0x07
     f08:	b8 85       	ldd	r27, Y+8	; 0x08
     f0a:	02 97       	sbiw	r24, 0x02	; 2
     f0c:	a4 40       	sbci	r26, 0x04	; 4
     f0e:	b1 05       	cpc	r27, r1
     f10:	08 f0       	brcs	.+2      	; 0xf14 <main+0x170>
     f12:	3c c0       	rjmp	.+120    	; 0xf8c <main+0x1e8>
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	af 81       	ldd	r26, Y+7	; 0x07
     f1a:	b8 85       	ldd	r27, Y+8	; 0x08
     f1c:	02 97       	sbiw	r24, 0x02	; 2
     f1e:	a1 09       	sbc	r26, r1
     f20:	b1 09       	sbc	r27, r1
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	af 83       	std	Y+7, r26	; 0x07
     f28:	b8 87       	std	Y+8, r27	; 0x08
        __loops = __ticks / 4;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	af 81       	ldd	r26, Y+7	; 0x07
     f30:	b8 85       	ldd	r27, Y+8	; 0x08
     f32:	b6 95       	lsr	r27
     f34:	a7 95       	ror	r26
     f36:	97 95       	ror	r25
     f38:	87 95       	ror	r24
     f3a:	b6 95       	lsr	r27
     f3c:	a7 95       	ror	r26
     f3e:	97 95       	ror	r25
     f40:	87 95       	ror	r24
     f42:	8d 87       	std	Y+13, r24	; 0x0d
     f44:	9e 87       	std	Y+14, r25	; 0x0e
     f46:	af 87       	std	Y+15, r26	; 0x0f
     f48:	b8 8b       	std	Y+16, r27	; 0x10
        __padding = __ticks % 4;
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	af 81       	ldd	r26, Y+7	; 0x07
     f50:	b8 85       	ldd	r27, Y+8	; 0x08
     f52:	83 70       	andi	r24, 0x03	; 3
     f54:	99 27       	eor	r25, r25
     f56:	aa 27       	eor	r26, r26
     f58:	bb 27       	eor	r27, r27
     f5a:	89 87       	std	Y+9, r24	; 0x09
     f5c:	9a 87       	std	Y+10, r25	; 0x0a
     f5e:	ab 87       	std	Y+11, r26	; 0x0b
     f60:	bc 87       	std	Y+12, r27	; 0x0c
        if( __loops != 0 )
     f62:	8d 85       	ldd	r24, Y+13	; 0x0d
     f64:	9e 85       	ldd	r25, Y+14	; 0x0e
     f66:	af 85       	ldd	r26, Y+15	; 0x0f
     f68:	b8 89       	ldd	r27, Y+16	; 0x10
     f6a:	89 2b       	or	r24, r25
     f6c:	8a 2b       	or	r24, r26
     f6e:	8b 2b       	or	r24, r27
     f70:	09 f4       	brne	.+2      	; 0xf74 <main+0x1d0>
     f72:	51 c0       	rjmp	.+162    	; 0x1016 <main+0x272>
            _delay_loop_2_x( (uint16_t)__loops );
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	9b 8b       	std	Y+19, r25	; 0x13
     f7a:	8a 8b       	std	Y+18, r24	; 0x12
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
     f7c:	8a 89       	ldd	r24, Y+18	; 0x12
     f7e:	9b 89       	ldd	r25, Y+19	; 0x13
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <main+0x1dc>
     f84:	00 00       	nop
     f86:	9b 8b       	std	Y+19, r25	; 0x13
     f88:	8a 8b       	std	Y+18, r24	; 0x12
     f8a:	45 c0       	rjmp	.+138    	; 0x1016 <main+0x272>
        if( __loops != 0 )
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	af 81       	ldd	r26, Y+7	; 0x07
     f92:	b8 85       	ldd	r27, Y+8	; 0x08
     f94:	04 97       	sbiw	r24, 0x04	; 4
     f96:	a1 09       	sbc	r26, r1
     f98:	b1 09       	sbc	r27, r1
     f9a:	8d 83       	std	Y+5, r24	; 0x05
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	af 83       	std	Y+7, r26	; 0x07
     fa0:	b8 87       	std	Y+8, r27	; 0x08
        __loops = __ticks / 8;
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	af 81       	ldd	r26, Y+7	; 0x07
     fa8:	b8 85       	ldd	r27, Y+8	; 0x08
     faa:	68 94       	set
     fac:	12 f8       	bld	r1, 2
     fae:	b6 95       	lsr	r27
     fb0:	a7 95       	ror	r26
     fb2:	97 95       	ror	r25
     fb4:	87 95       	ror	r24
     fb6:	16 94       	lsr	r1
     fb8:	d1 f7       	brne	.-12     	; 0xfae <main+0x20a>
     fba:	8d 87       	std	Y+13, r24	; 0x0d
     fbc:	9e 87       	std	Y+14, r25	; 0x0e
     fbe:	af 87       	std	Y+15, r26	; 0x0f
     fc0:	b8 8b       	std	Y+16, r27	; 0x10
        __padding = __ticks % 8;
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	af 81       	ldd	r26, Y+7	; 0x07
     fc8:	b8 85       	ldd	r27, Y+8	; 0x08
     fca:	87 70       	andi	r24, 0x07	; 7
     fcc:	99 27       	eor	r25, r25
     fce:	aa 27       	eor	r26, r26
     fd0:	bb 27       	eor	r27, r27
     fd2:	89 87       	std	Y+9, r24	; 0x09
     fd4:	9a 87       	std	Y+10, r25	; 0x0a
     fd6:	ab 87       	std	Y+11, r26	; 0x0b
     fd8:	bc 87       	std	Y+12, r27	; 0x0c
        if( __loops != 0 )
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	af 85       	ldd	r26, Y+15	; 0x0f
     fe0:	b8 89       	ldd	r27, Y+16	; 0x10
     fe2:	89 2b       	or	r24, r25
     fe4:	8a 2b       	or	r24, r26
     fe6:	8b 2b       	or	r24, r27
     fe8:	b1 f0       	breq	.+44     	; 0x1016 <main+0x272>
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	af 85       	ldd	r26, Y+15	; 0x0f
     ff0:	b8 89       	ldd	r27, Y+16	; 0x10
     ff2:	8c 8b       	std	Y+20, r24	; 0x14
     ff4:	9d 8b       	std	Y+21, r25	; 0x15
     ff6:	ae 8b       	std	Y+22, r26	; 0x16
     ff8:	bf 8b       	std	Y+23, r27	; 0x17
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
     ffa:	8c 89       	ldd	r24, Y+20	; 0x14
     ffc:	9d 89       	ldd	r25, Y+21	; 0x15
     ffe:	ae 89       	ldd	r26, Y+22	; 0x16
    1000:	bf 89       	ldd	r27, Y+23	; 0x17
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	a1 09       	sbc	r26, r1
    1006:	b1 09       	sbc	r27, r1
    1008:	00 00       	nop
    100a:	01 f0       	breq	.+0      	; 0x100c <main+0x268>
    100c:	d1 f7       	brne	.-12     	; 0x1002 <main+0x25e>
    100e:	8c 8b       	std	Y+20, r24	; 0x14
    1010:	9d 8b       	std	Y+21, r25	; 0x15
    1012:	ae 8b       	std	Y+22, r26	; 0x16
    1014:	bf 8b       	std	Y+23, r27	; 0x17
        __padding = __ticks % 8;
        if( __loops != 0 )
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	ab 85       	ldd	r26, Y+11	; 0x0b
    101c:	bc 85       	ldd	r27, Y+12	; 0x0c
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	a1 05       	cpc	r26, r1
    1022:	b1 05       	cpc	r27, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x284>
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    1026:	00 00       	nop
        if( __loops != 0 )
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	ab 85       	ldd	r26, Y+11	; 0x0b
    102e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1030:	02 97       	sbiw	r24, 0x02	; 2
    1032:	a1 05       	cpc	r26, r1
    1034:	b1 05       	cpc	r27, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <main+0x296>
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    1038:	00 c0       	rjmp	.+0      	; 0x103a <main+0x296>
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1040:	bc 85       	ldd	r27, Y+12	; 0x0c
    1042:	03 97       	sbiw	r24, 0x03	; 3
    1044:	a1 05       	cpc	r26, r1
    1046:	b1 05       	cpc	r27, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <main+0x2a8>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    104a:	c8 95       	lpm
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	ab 85       	ldd	r26, Y+11	; 0x0b
    1052:	bc 85       	ldd	r27, Y+12	; 0x0c
    1054:	04 97       	sbiw	r24, 0x04	; 4
    1056:	a1 05       	cpc	r26, r1
    1058:	b1 05       	cpc	r27, r1
    105a:	11 f4       	brne	.+4      	; 0x1060 <main+0x2bc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    105c:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    105e:	00 00       	nop

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	9a 85       	ldd	r25, Y+10	; 0x0a
    1064:	ab 85       	ldd	r26, Y+11	; 0x0b
    1066:	bc 85       	ldd	r27, Y+12	; 0x0c
    1068:	05 97       	sbiw	r24, 0x05	; 5
    106a:	a1 05       	cpc	r26, r1
    106c:	b1 05       	cpc	r27, r1
    106e:	11 f4       	brne	.+4      	; 0x1074 <main+0x2d0>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    1070:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <main+0x2d0>
    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	ab 85       	ldd	r26, Y+11	; 0x0b
    107a:	bc 85       	ldd	r27, Y+12	; 0x0c
    107c:	06 97       	sbiw	r24, 0x06	; 6
    107e:	a1 05       	cpc	r26, r1
    1080:	b1 05       	cpc	r27, r1
    1082:	11 f4       	brne	.+4      	; 0x1088 <main+0x2e4>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    1084:	c8 95       	lpm
    1086:	c8 95       	lpm
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	ab 85       	ldd	r26, Y+11	; 0x0b
    108e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1090:	07 97       	sbiw	r24, 0x07	; 7
    1092:	a1 05       	cpc	r26, r1
    1094:	b1 05       	cpc	r27, r1
    1096:	19 f4       	brne	.+6      	; 0x109e <main+0x2fa>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    1098:	c8 95       	lpm
    109a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    109c:	00 00       	nop
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    10a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    10a6:	08 97       	sbiw	r24, 0x08	; 8
    10a8:	a1 05       	cpc	r26, r1
    10aa:	b1 05       	cpc	r27, r1
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <main+0x310>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    10ae:	c8 95       	lpm
    10b0:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <main+0x310>
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    10ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    10bc:	09 97       	sbiw	r24, 0x09	; 9
    10be:	a1 05       	cpc	r26, r1
    10c0:	b1 05       	cpc	r27, r1
    10c2:	19 f4       	brne	.+6      	; 0x10ca <main+0x326>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    10c4:	c8 95       	lpm
    10c6:	c8 95       	lpm
    10c8:	c8 95       	lpm
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    10d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    10d2:	0a 97       	sbiw	r24, 0x0a	; 10
    10d4:	a1 05       	cpc	r26, r1
    10d6:	b1 05       	cpc	r27, r1
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <main+0x33e>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    10da:	c8 95       	lpm
    10dc:	c8 95       	lpm
    10de:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    10e0:	00 00       	nop
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    if( __padding == 11 ) _NOP11();
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    10e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    10ea:	0b 97       	sbiw	r24, 0x0b	; 11
    10ec:	a1 05       	cpc	r26, r1
    10ee:	b1 05       	cpc	r27, r1
    10f0:	21 f4       	brne	.+8      	; 0x10fa <main+0x356>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    10f2:	c8 95       	lpm
    10f4:	c8 95       	lpm
    10f6:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <main+0x356>
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    if( __padding == 11 ) _NOP11();
    if( __padding == 12 ) _NOP12();
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    1100:	bc 85       	ldd	r27, Y+12	; 0x0c
    1102:	0c 97       	sbiw	r24, 0x0c	; 12
    1104:	a1 05       	cpc	r26, r1
    1106:	b1 05       	cpc	r27, r1
    1108:	21 f4       	brne	.+8      	; 0x1112 <main+0x36e>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    110a:	c8 95       	lpm
    110c:	c8 95       	lpm
    110e:	c8 95       	lpm
    1110:	c8 95       	lpm
	
	_delay_ms(100);

	///// Initialize timer 0
	TCCR0 |= _BV(CS00) | _BV(CS01) | _BV(WGM01); //64
    1112:	83 e5       	ldi	r24, 0x53	; 83
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	23 e5       	ldi	r18, 0x53	; 83
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	2b 60       	ori	r18, 0x0B	; 11
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
	OCR0 = 10; //0.0636 mS.
    1124:	8c e5       	ldi	r24, 0x5C	; 92
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	2a e0       	ldi	r18, 0x0A	; 10
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
	TIMSK  |= _BV(OCIE0);   // start timer interrupt
    112e:	89 e5       	ldi	r24, 0x59	; 89
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	29 e5       	ldi	r18, 0x59	; 89
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	f9 01       	movw	r30, r18
    1138:	20 81       	ld	r18, Z
    113a:	22 60       	ori	r18, 0x02	; 2
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
	
	///////////////////////// for CD4046 (begin)//////////////////////////////////
	// PWM config at PD7 -Timer2 //PWM, PhaseCorrect
	TCCR2|= _BV(CS21) |_BV(CS20) | _BV(WGM20) | _BV(COM21);//compare match
    1140:	85 e4       	ldi	r24, 0x45	; 69
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	25 e4       	ldi	r18, 0x45	; 69
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	20 81       	ld	r18, Z
    114c:	23 66       	ori	r18, 0x63	; 99
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	OCR2=cd4046_min_speed_OCR;		
    1152:	83 e4       	ldi	r24, 0x43	; 67
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <cd4046_min_speed_OCR>
    115a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <cd4046_min_speed_OCR+0x1>
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
	
	MCUCR = _BV(ISC11) ;  // int1 on falling edge
    1162:	85 e5       	ldi	r24, 0x55	; 85
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	28 e0       	ldi	r18, 0x08	; 8
    1168:	fc 01       	movw	r30, r24
    116a:	20 83       	st	Z, r18
	GICR |=  _BV(INT1);
    116c:	8b e5       	ldi	r24, 0x5B	; 91
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	2b e5       	ldi	r18, 0x5B	; 91
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	f9 01       	movw	r30, r18
    1176:	20 81       	ld	r18, Z
    1178:	20 68       	ori	r18, 0x80	; 128
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
	sei();
    117e:	78 94       	sei

	///////////////////////// for CD4046 (end)//////////////////////////////////


	///////////////////////// for PWM for PMDC motor////////////////////////////
	TCCR1A |= _BV(WGM10)| _BV(COM1B1);
    1180:	8f e4       	ldi	r24, 0x4F	; 79
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	2f e4       	ldi	r18, 0x4F	; 79
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	f9 01       	movw	r30, r18
    118a:	20 81       	ld	r18, Z
    118c:	21 62       	ori	r18, 0x21	; 33
    118e:	fc 01       	movw	r30, r24
    1190:	20 83       	st	Z, r18
	TCCR1B |= _BV(CS12);
    1192:	8e e4       	ldi	r24, 0x4E	; 78
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	2e e4       	ldi	r18, 0x4E	; 78
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	f9 01       	movw	r30, r18
    119c:	20 81       	ld	r18, Z
    119e:	24 60       	ori	r18, 0x04	; 4
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
	////////////////////////////////////////////////////////////////////////////


	cd4046_offset_value=cd4046_indexer_offset_value;
    11a4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cd4046_indexer_offset_value>
    11a8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cd4046_indexer_offset_value+0x1>
    11ac:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <cd4046_offset_value+0x1>
    11b0:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <cd4046_offset_value>
	cd4046_a=1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <cd4046_a>
	cd4046_za=1000;
    11ba:	88 ee       	ldi	r24, 0xE8	; 232
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <cd4046_za+0x1>
    11c2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <cd4046_za>
	
	while(cd4046_a!=5)
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <main+0x428>
	calibrating_cycle();
    11c8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <calibrating_cycle>

	cd4046_offset_value=cd4046_indexer_offset_value;
	cd4046_a=1;
	cd4046_za=1000;
	
	while(cd4046_a!=5)
    11cc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <cd4046_a>
    11d0:	85 30       	cpi	r24, 0x05	; 5
    11d2:	d1 f7       	brne	.-12     	; 0x11c8 <main+0x424>
	calibrating_cycle();
	//	PORTD |= (1<<PD4);	
	total=cd4046_acc_steps+cd4046_decn_steps;
    11d4:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <cd4046_acc_steps>
    11d8:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <cd4046_acc_steps+0x1>
    11dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cd4046_decn_steps>
    11e0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cd4046_decn_steps+0x1>
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <total+0x1>
    11ec:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <total>
	cd4046_acc_percentage=((float)cd4046_acc_steps/(float)total)*1000.0;
    11f0:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <cd4046_acc_steps>
    11f4:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <cd4046_acc_steps+0x1>
    11f8:	cc 01       	movw	r24, r24
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1206:	6b 01       	movw	r12, r22
    1208:	7c 01       	movw	r14, r24
    120a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <total>
    120e:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <total+0x1>
    1212:	cc 01       	movw	r24, r24
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9c 01       	movw	r18, r24
    1226:	ad 01       	movw	r20, r26
    1228:	c7 01       	movw	r24, r14
    122a:	b6 01       	movw	r22, r12
    122c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__divsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a e7       	ldi	r20, 0x7A	; 122
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	0e 94 2c 13 	call	0x2658	; 0x2658 <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cd4046_acc_percentage+0x1>
    1258:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cd4046_acc_percentage>
	cd4046_dec_percentage=((float)cd4046_decn_steps/(float)total)*1000.0;
    125c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cd4046_decn_steps>
    1260:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cd4046_decn_steps+0x1>
    1264:	cc 01       	movw	r24, r24
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1272:	6b 01       	movw	r12, r22
    1274:	7c 01       	movw	r14, r24
    1276:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <total>
    127a:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <total+0x1>
    127e:	cc 01       	movw	r24, r24
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9c 01       	movw	r18, r24
    1292:	ad 01       	movw	r20, r26
    1294:	c7 01       	movw	r24, r14
    1296:	b6 01       	movw	r22, r12
    1298:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__divsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a e7       	ldi	r20, 0x7A	; 122
    12a6:	54 e4       	ldi	r21, 0x44	; 68
    12a8:	bc 01       	movw	r22, r24
    12aa:	cd 01       	movw	r24, r26
    12ac:	0e 94 2c 13 	call	0x2658	; 0x2658 <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <cd4046_dec_percentage+0x1>
    12c4:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <cd4046_dec_percentage>

	lcd_clrscr();
    12c8:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>
	lcd_gotoxy(0,1);
	itoa(cd4046_acc_steps, buffer, 10);
	lcd_puts(buffer);
	lcd_puts(" ");*/

cd4046_stop_on_signal=STOP_ON_COUNT;
    12cc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cd4046_stop_on_signal>
//runsteps(3600);
	//OCR1B=255;

//	lcd_clrscr();
	circumference=3.142*diameter_of_roller;
    12d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <diameter_of_roller>
    12d4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <diameter_of_roller+0x1>
    12d8:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <diameter_of_roller+0x2>
    12dc:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <diameter_of_roller+0x3>
    12e0:	27 e8       	ldi	r18, 0x87	; 135
    12e2:	36 e1       	ldi	r19, 0x16	; 22
    12e4:	49 e4       	ldi	r20, 0x49	; 73
    12e6:	50 e4       	ldi	r21, 0x40	; 64
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 2c 13 	call	0x2658	; 0x2658 <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <circumference>
    12f8:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <circumference+0x1>
    12fc:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <circumference+0x2>
    1300:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <circumference+0x3>
	mm_per_step=circumference/stepper_PPR;
    1304:	c0 90 3f 01 	lds	r12, 0x013F	; 0x80013f <circumference>
    1308:	d0 90 40 01 	lds	r13, 0x0140	; 0x800140 <circumference+0x1>
    130c:	e0 90 41 01 	lds	r14, 0x0141	; 0x800141 <circumference+0x2>
    1310:	f0 90 42 01 	lds	r15, 0x0142	; 0x800142 <circumference+0x3>
    1314:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stepper_PPR>
    1318:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <stepper_PPR+0x1>
    131c:	cc 01       	movw	r24, r24
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9c 01       	movw	r18, r24
    1330:	ad 01       	movw	r20, r26
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__divsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <mm_per_step>
    1342:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <mm_per_step+0x1>
    1346:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <mm_per_step+0x2>
    134a:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <mm_per_step+0x3>

	geteepromdata();
    134e:	0e 94 66 00 	call	0xcc	; 0xcc <geteepromdata>

	if ((bit_is_clear(PINA,0)==1)||(check0!=3)||(check1!=11))  // SETTINGS key
    1352:	89 e3       	ldi	r24, 0x39	; 57
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	99 27       	eor	r25, r25
    1362:	89 2b       	or	r24, r25
    1364:	41 f0       	breq	.+16     	; 0x1376 <main+0x5d2>
    1366:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <check0>
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	21 f4       	brne	.+8      	; 0x1376 <main+0x5d2>
    136e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <check1>
    1372:	8b 30       	cpi	r24, 0x0B	; 11
    1374:	09 f1       	breq	.+66     	; 0x13b8 <main+0x614>
	{
		length=100;
    1376:	84 e6       	ldi	r24, 0x64	; 100
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <length+0x1>
    137e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <length>
		saveeepromdata();
    1382:	0e 94 49 00 	call	0x92	; 0x92 <saveeepromdata>
		lcd_gotoxy(0,0);
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
		lcd_puts("Values reset");
    138e:	8e ea       	ldi	r24, 0xAE	; 174
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
		dely();
    1396:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <dely>
		dely();
    139a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <dely>
		while((bit_is_clear(PINA,0)==1))
    139e:	00 00       	nop
    13a0:	89 e3       	ldi	r24, 0x39	; 57
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	99 27       	eor	r25, r25
    13b0:	89 2b       	or	r24, r25
    13b2:	b1 f3       	breq	.-20     	; 0x13a0 <main+0x5fc>
		{}
		lcd_clrscr();
    13b4:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>
}


	 a=10;
    13b8:	8a e0       	ldi	r24, 0x0A	; 10
    13ba:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	 c=10;
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <c>
	ADCSRA = _BV(ADEN) | _BV(ADPS2);
    13c4:	86 e2       	ldi	r24, 0x26	; 38
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	24 e8       	ldi	r18, 0x84	; 132
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
	// Select pin ADC0 using MUX
	ADMUX = 0;
    13ce:	87 e2       	ldi	r24, 0x27	; 39
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	fc 01       	movw	r30, r24
    13d4:	10 82       	st	Z, r1
	//menu=1;
//	 	TIMSK  &= ~_BV(OCIE0);
      while (1)
		{ 
		   //Start conversion
		   ADCSRA |= _BV(ADSC);
    13d6:	86 e2       	ldi	r24, 0x26	; 38
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	26 e2       	ldi	r18, 0x26	; 38
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	f9 01       	movw	r30, r18
    13e0:	20 81       	ld	r18, Z
    13e2:	20 64       	ori	r18, 0x40	; 64
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
		   
		   // wait until converstion completed
		   while (ADCSRA & _BV(ADSC) ) {}
    13e8:	00 00       	nop
    13ea:	86 e2       	ldi	r24, 0x26	; 38
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	fc 01       	movw	r30, r24
    13f0:	80 81       	ld	r24, Z
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	80 74       	andi	r24, 0x40	; 64
    13f8:	99 27       	eor	r25, r25
    13fa:	89 2b       	or	r24, r25
    13fc:	b1 f7       	brne	.-20     	; 0x13ea <main+0x646>
		   
		   // get converted value
		   int z = ADCW;
    13fe:	84 e2       	ldi	r24, 0x24	; 36
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	fc 01       	movw	r30, r24
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	8b 83       	std	Y+3, r24	; 0x03

		   if (z<15)
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	0f 97       	sbiw	r24, 0x0f	; 15
    1412:	84 f4       	brge	.+32     	; 0x1434 <main+0x690>
		   {
			   if (key1press<500)
    1414:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <key1press>
    1418:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <key1press+0x1>
    141c:	84 3f       	cpi	r24, 0xF4	; 244
    141e:	91 40       	sbci	r25, 0x01	; 1
    1420:	4c f4       	brge	.+18     	; 0x1434 <main+0x690>
			   key1press++;
    1422:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <key1press>
    1426:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <key1press+0x1>
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <key1press+0x1>
    1430:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <key1press>
		   }
		   
		   if (z>45&&z<77)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	8e 97       	sbiw	r24, 0x2e	; 46
    143a:	ac f0       	brlt	.+42     	; 0x1466 <main+0x6c2>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	8d 34       	cpi	r24, 0x4D	; 77
    1442:	91 05       	cpc	r25, r1
    1444:	84 f4       	brge	.+32     	; 0x1466 <main+0x6c2>
		   {
			   if (key2press<500)
    1446:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <key2press>
    144a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <key2press+0x1>
    144e:	84 3f       	cpi	r24, 0xF4	; 244
    1450:	91 40       	sbci	r25, 0x01	; 1
    1452:	4c f4       	brge	.+18     	; 0x1466 <main+0x6c2>
			   key2press++;
    1454:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <key2press>
    1458:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <key2press+0x1>
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <key2press+0x1>
    1462:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <key2press>
		   }
		   
		   if (z>133&&z<253)
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	86 38       	cpi	r24, 0x86	; 134
    146c:	91 05       	cpc	r25, r1
    146e:	ac f0       	brlt	.+42     	; 0x149a <main+0x6f6>
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	8d 3f       	cpi	r24, 0xFD	; 253
    1476:	91 05       	cpc	r25, r1
    1478:	84 f4       	brge	.+32     	; 0x149a <main+0x6f6>
		   {
			   if (key3press<500)
    147a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <key3press>
    147e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <key3press+0x1>
    1482:	84 3f       	cpi	r24, 0xF4	; 244
    1484:	91 40       	sbci	r25, 0x01	; 1
    1486:	4c f4       	brge	.+18     	; 0x149a <main+0x6f6>
			   key3press++;
    1488:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <key3press>
    148c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <key3press+0x1>
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <key3press+0x1>
    1496:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <key3press>
		   }
		   
		   if (z>327&&z<414)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	88 34       	cpi	r24, 0x48	; 72
    14a0:	91 40       	sbci	r25, 0x01	; 1
    14a2:	ac f0       	brlt	.+42     	; 0x14ce <main+0x72a>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	8e 39       	cpi	r24, 0x9E	; 158
    14aa:	91 40       	sbci	r25, 0x01	; 1
    14ac:	84 f4       	brge	.+32     	; 0x14ce <main+0x72a>
		   {
			   if (key4press<500)
    14ae:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <key4press>
    14b2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <key4press+0x1>
    14b6:	84 3f       	cpi	r24, 0xF4	; 244
    14b8:	91 40       	sbci	r25, 0x01	; 1
    14ba:	4c f4       	brge	.+18     	; 0x14ce <main+0x72a>
			   key4press++;
    14bc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <key4press>
    14c0:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <key4press+0x1>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <key4press+0x1>
    14ca:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <key4press>
		   }
		   
		   if (z>511&&z<703)
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 15       	cp	r24, r1
    14d4:	92 40       	sbci	r25, 0x02	; 2
    14d6:	ac f0       	brlt	.+42     	; 0x1502 <main+0x75e>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	8f 3b       	cpi	r24, 0xBF	; 191
    14de:	92 40       	sbci	r25, 0x02	; 2
    14e0:	84 f4       	brge	.+32     	; 0x1502 <main+0x75e>
		   {
			   if (key5press<500)
    14e2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <key5press>
    14e6:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <key5press+0x1>
    14ea:	84 3f       	cpi	r24, 0xF4	; 244
    14ec:	91 40       	sbci	r25, 0x01	; 1
    14ee:	4c f4       	brge	.+18     	; 0x1502 <main+0x75e>
			   key5press++;
    14f0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <key5press>
    14f4:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <key5press+0x1>
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <key5press+0x1>
    14fe:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <key5press>
		   }
		   
		   if (z>785&&z<891)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	82 31       	cpi	r24, 0x12	; 18
    1508:	93 40       	sbci	r25, 0x03	; 3
    150a:	ac f0       	brlt	.+42     	; 0x1536 <main+0x792>
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	8b 37       	cpi	r24, 0x7B	; 123
    1512:	93 40       	sbci	r25, 0x03	; 3
    1514:	84 f4       	brge	.+32     	; 0x1536 <main+0x792>
		   {
			   if (key6press<500)
    1516:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <key6press>
    151a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <key6press+0x1>
    151e:	84 3f       	cpi	r24, 0xF4	; 244
    1520:	91 40       	sbci	r25, 0x01	; 1
    1522:	4c f4       	brge	.+18     	; 0x1536 <main+0x792>
			   key6press++;
    1524:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <key6press>
    1528:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <key6press+0x1>
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <key6press+0x1>
    1532:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <key6press>
		   }

		   if (z>911)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	80 39       	cpi	r24, 0x90	; 144
    153c:	93 40       	sbci	r25, 0x03	; 3
    153e:	c4 f0       	brlt	.+48     	; 0x1570 <main+0x7cc>
		   {
			   key1press=0;
    1540:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <key1press+0x1>
    1544:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <key1press>
			   key2press=0;
    1548:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <key2press+0x1>
    154c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <key2press>
			   key3press=0;
    1550:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <key3press+0x1>
    1554:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <key3press>
			   key4press=0;
    1558:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <key4press+0x1>
    155c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <key4press>
			   key5press=0;
    1560:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <key5press+0x1>
    1564:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <key5press>
			   key6press=0;
    1568:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <key6press+0x1>
    156c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <key6press>
		   }

	if (settings==0)
    1570:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <settings>
    1574:	88 23       	and	r24, r24
    1576:	09 f0       	breq	.+2      	; 0x157a <main+0x7d6>
    1578:	7f c0       	rjmp	.+254    	; 0x1678 <main+0x8d4>
	{
		
		lcd_gotoxy(0,0);
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
		if(run==1)
    1582:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <run>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	29 f4       	brne	.+10     	; 0x1594 <main+0x7f0>
		{
			lcd_puts("      Running       ");
    158a:	8b eb       	ldi	r24, 0xBB	; 187
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
    1592:	19 c0       	rjmp	.+50     	; 0x15c6 <main+0x822>
		}
		else 
		if (run==0&&a!=10)
    1594:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <run>
    1598:	88 23       	and	r24, r24
    159a:	49 f4       	brne	.+18     	; 0x15ae <main+0x80a>
    159c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    15a0:	8a 30       	cpi	r24, 0x0A	; 10
    15a2:	29 f0       	breq	.+10     	; 0x15ae <main+0x80a>
		{
			lcd_puts("      Stopping      ");			
    15a4:	80 ed       	ldi	r24, 0xD0	; 208
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
    15ac:	0c c0       	rjmp	.+24     	; 0x15c6 <main+0x822>
		}
		else
		if (run==0&&a==10)
    15ae:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <run>
    15b2:	88 23       	and	r24, r24
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <main+0x822>
    15b6:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    15ba:	8a 30       	cpi	r24, 0x0A	; 10
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <main+0x822>
		{
			lcd_puts("      Stopped       ");
    15be:	85 ee       	ldi	r24, 0xE5	; 229
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
		}

		lcd_gotoxy(0,2);
    15c6:	62 e0       	ldi	r22, 0x02	; 2
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
		lcd_puts("Set Length:");
    15ce:	8a ef       	ldi	r24, 0xFA	; 250
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
		itoa(length, buffer, 10);
    15d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <length>
    15da:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <length+0x1>
    15de:	9e 01       	movw	r18, r28
    15e0:	28 5e       	subi	r18, 0xE8	; 232
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	4a e0       	ldi	r20, 0x0A	; 10
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	b9 01       	movw	r22, r18
    15ea:	0e 94 99 13 	call	0x2732	; 0x2732 <itoa>
		lcd_puts(buffer);
    15ee:	ce 01       	movw	r24, r28
    15f0:	48 96       	adiw	r24, 0x18	; 24
    15f2:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
		lcd_puts(" mm  ");
    15f6:	86 e0       	ldi	r24, 0x06	; 6
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
			
			
		if (SETTINGS_KEY>10)//if (bit_is_clear(KEYPAD,ENTER)==1)  // settings push button
    15fe:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <key3press>
    1602:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <key3press+0x1>
    1606:	0b 97       	sbiw	r24, 0x0b	; 11
    1608:	7c f0       	brlt	.+30     	; 0x1628 <main+0x884>
		{
			if (db3<20)
    160a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <db3>
    160e:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <db3+0x1>
    1612:	44 97       	sbiw	r24, 0x14	; 20
    1614:	48 f4       	brcc	.+18     	; 0x1628 <main+0x884>
			db3++;
    1616:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <db3>
    161a:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <db3+0x1>
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <db3+0x1>
    1624:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <db3>
		}
		
		if (SETTINGS_KEY==0)//if (bit_is_clear(KEYPAD,ENTER)==0)
    1628:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <key3press>
    162c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <key3press+0x1>
    1630:	89 2b       	or	r24, r25
    1632:	11 f5       	brne	.+68     	; 0x1678 <main+0x8d4>
		{
			if (db3>=10)
    1634:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <db3>
    1638:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <db3+0x1>
    163c:	0a 97       	sbiw	r24, 0x0a	; 10
    163e:	b0 f0       	brcs	.+44     	; 0x166c <main+0x8c8>
			{
				settings=1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <settings>
				valchange=1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <valchange>
				refreshval=1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refreshval>
				menu=1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <menu>
				
				temp_length=length;
    1658:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <length>
    165c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <length+0x1>
    1660:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <temp_length+0x1>
    1664:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <temp_length>

				lcd_clrscr();
    1668:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>
			}
			db3=1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <db3+0x1>
    1674:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <db3>
		}			
			
	}

	if (settings==1)
    1678:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <settings>
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	09 f0       	breq	.+2      	; 0x1682 <main+0x8de>
    1680:	84 c1       	rjmp	.+776    	; 0x198a <main+0xbe6>
	{
		if (SETTINGS_KEY>10)  
    1682:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <key3press>
    1686:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <key3press+0x1>
    168a:	0b 97       	sbiw	r24, 0x0b	; 11
    168c:	84 f0       	brlt	.+32     	; 0x16ae <main+0x90a>
		{
			if (db4<100)
    168e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <db4>
    1692:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <db4+0x1>
    1696:	84 36       	cpi	r24, 0x64	; 100
    1698:	91 05       	cpc	r25, r1
    169a:	48 f4       	brcc	.+18     	; 0x16ae <main+0x90a>
			db4++;
    169c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <db4>
    16a0:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <db4+0x1>
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <db4+0x1>
    16aa:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <db4>
		}
		if (SETTINGS_KEY==0) 
    16ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <key3press>
    16b2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <key3press+0x1>
    16b6:	89 2b       	or	r24, r25
    16b8:	59 f5       	brne	.+86     	; 0x1710 <main+0x96c>
		{
			if (db4>=50)
    16ba:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <db4>
    16be:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <db4+0x1>
    16c2:	c2 97       	sbiw	r24, 0x32	; 50
    16c4:	f8 f0       	brcs	.+62     	; 0x1704 <main+0x960>
			{
				if (menu<1)
    16c6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
    16ca:	88 23       	and	r24, r24
    16cc:	79 f4       	brne	.+30     	; 0x16ec <main+0x948>
				{
					menu++;
    16ce:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <menu>
					valchange=1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <valchange>
					db4=1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <db4+0x1>
    16e6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <db4>
    16ea:	0c c0       	rjmp	.+24     	; 0x1704 <main+0x960>
				}
				else
				{
					menu=1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <menu>
					valchange=1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <valchange>
					db4=1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <db4+0x1>
    1700:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <db4>
				}
			}
			db4=1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <db4+0x1>
    170c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <db4>
		}		

		if (EXIT_KEY>10)  
    1710:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <key4press>
    1714:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <key4press+0x1>
    1718:	0b 97       	sbiw	r24, 0x0b	; 11
    171a:	84 f0       	brlt	.+32     	; 0x173c <main+0x998>
		{
			if (db5<100)
    171c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <db5>
    1720:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <db5+0x1>
    1724:	84 36       	cpi	r24, 0x64	; 100
    1726:	91 05       	cpc	r25, r1
    1728:	48 f4       	brcc	.+18     	; 0x173c <main+0x998>
			db5++;
    172a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <db5>
    172e:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <db5+0x1>
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <db5+0x1>
    1738:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <db5>
		}
		if (EXIT_KEY==0)
    173c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <key4press>
    1740:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <key4press+0x1>
    1744:	89 2b       	or	r24, r25
    1746:	01 f5       	brne	.+64     	; 0x1788 <main+0x9e4>
		{
			if (db5>=50)
    1748:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <db5>
    174c:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <db5+0x1>
    1750:	c2 97       	sbiw	r24, 0x32	; 50
    1752:	d0 f0       	brcs	.+52     	; 0x1788 <main+0x9e4>
			{
				lcd_clrscr();
    1754:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>
				if (changed==1)
    1758:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <changed>
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	61 f4       	brne	.+24     	; 0x1778 <main+0x9d4>
				{
					length=temp_length;
    1760:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <temp_length>
    1764:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <temp_length+0x1>
    1768:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <length+0x1>
    176c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <length>
					saveeepromdata();
    1770:	0e 94 49 00 	call	0x92	; 0x92 <saveeepromdata>
					changed=0;
    1774:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <changed>
				}
				settings=0;
    1778:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <settings>
				db5=1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <db5+0x1>
    1784:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <db5>
			}
		}		
		
		if (UP_KEY>10) 
    1788:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <key6press>
    178c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <key6press+0x1>
    1790:	0b 97       	sbiw	r24, 0x0b	; 11
    1792:	1c f1       	brlt	.+70     	; 0x17da <main+0xa36>
		{
			if (db6<5000)
    1794:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <db6>
    1798:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <db6+0x1>
    179c:	88 38       	cpi	r24, 0x88	; 136
    179e:	93 41       	sbci	r25, 0x13	; 19
    17a0:	48 f4       	brcc	.+18     	; 0x17b4 <main+0xa10>
			db6++;
    17a2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <db6>
    17a6:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <db6+0x1>
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <db6+0x1>
    17b0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <db6>
			if (db6>=dbval)
    17b4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <db6>
    17b8:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <db6+0x1>
    17bc:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <dbval>
    17c0:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <dbval+0x1>
    17c4:	82 17       	cp	r24, r18
    17c6:	93 07       	cpc	r25, r19
    17c8:	40 f0       	brcs	.+16     	; 0x17da <main+0xa36>
			{
				uppress();
    17ca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uppress>
				db6=1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <db6+0x1>
    17d6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <db6>
			}
		}
		if (UP_KEY==0) //if (bit_is_clear(KEYPAD,UP)==0)
    17da:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <key6press>
    17de:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <key6press+0x1>
    17e2:	89 2b       	or	r24, r25
    17e4:	79 f4       	brne	.+30     	; 0x1804 <main+0xa60>
		{
			if (db6>100)
    17e6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <db6>
    17ea:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <db6+0x1>
    17ee:	85 36       	cpi	r24, 0x65	; 101
    17f0:	91 05       	cpc	r25, r1
    17f2:	40 f0       	brcs	.+16     	; 0x1804 <main+0xa60>
			{
				uppress();
    17f4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uppress>
				db6=1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <db6+0x1>
    1800:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <db6>
			}
		}

		if (DOWN_KEY>10)
    1804:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <key5press>
    1808:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <key5press+0x1>
    180c:	0b 97       	sbiw	r24, 0x0b	; 11
    180e:	1c f1       	brlt	.+70     	; 0x1856 <main+0xab2>
		{
			if (db7<5000)
    1810:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <db7>
    1814:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <db7+0x1>
    1818:	88 38       	cpi	r24, 0x88	; 136
    181a:	93 41       	sbci	r25, 0x13	; 19
    181c:	48 f4       	brcc	.+18     	; 0x1830 <main+0xa8c>
			db7++;
    181e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <db7>
    1822:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <db7+0x1>
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <db7+0x1>
    182c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <db7>
			if (db7>=dbval)
    1830:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <db7>
    1834:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <db7+0x1>
    1838:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <dbval>
    183c:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <dbval+0x1>
    1840:	82 17       	cp	r24, r18
    1842:	93 07       	cpc	r25, r19
    1844:	40 f0       	brcs	.+16     	; 0x1856 <main+0xab2>
			{
				downpress();
    1846:	0e 94 9e 06 	call	0xd3c	; 0xd3c <downpress>
				db7=1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <db7+0x1>
    1852:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <db7>
			}
		}
		if (DOWN_KEY==0) //if (bit_is_clear(KEYPAD,UP)==0)
    1856:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <key5press>
    185a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <key5press+0x1>
    185e:	89 2b       	or	r24, r25
    1860:	79 f4       	brne	.+30     	; 0x1880 <main+0xadc>
		{
			if (db7>100)
    1862:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <db7>
    1866:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <db7+0x1>
    186a:	85 36       	cpi	r24, 0x65	; 101
    186c:	91 05       	cpc	r25, r1
    186e:	40 f0       	brcs	.+16     	; 0x1880 <main+0xadc>
			{
				downpress();
    1870:	0e 94 9e 06 	call	0xd3c	; 0xd3c <downpress>
				db7=1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <db7+0x1>
    187c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <db7>
			}
		}

		if (keypresscounter>10&&keypresscounter<20)//
    1880:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
    1884:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
    1888:	0b 97       	sbiw	r24, 0x0b	; 11
    188a:	64 f0       	brlt	.+24     	; 0x18a4 <main+0xb00>
    188c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
    1890:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
    1894:	44 97       	sbiw	r24, 0x14	; 20
    1896:	34 f4       	brge	.+12     	; 0x18a4 <main+0xb00>
		{
			dbval=100;
    1898:	84 e6       	ldi	r24, 0x64	; 100
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <dbval+0x1>
    18a0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <dbval>
		}

		if (keypresscounter>21)
    18a4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <keypresscounter>
    18a8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <keypresscounter+0x1>
    18ac:	46 97       	sbiw	r24, 0x16	; 22
    18ae:	34 f0       	brlt	.+12     	; 0x18bc <main+0xb18>
		{
			dbval=10;
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <dbval+0x1>
    18b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <dbval>
		}

		if (DOWN_KEY==0&&UP_KEY==0)
    18bc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <key5press>
    18c0:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <key5press+0x1>
    18c4:	89 2b       	or	r24, r25
    18c6:	81 f4       	brne	.+32     	; 0x18e8 <main+0xb44>
    18c8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <key6press>
    18cc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <key6press+0x1>
    18d0:	89 2b       	or	r24, r25
    18d2:	51 f4       	brne	.+20     	; 0x18e8 <main+0xb44>
		{
			keypresscounter=0;
    18d4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <keypresscounter+0x1>
    18d8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <keypresscounter>
			dbval=2000;
    18dc:	80 ed       	ldi	r24, 0xD0	; 208
    18de:	97 e0       	ldi	r25, 0x07	; 7
    18e0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <dbval+0x1>
    18e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <dbval>
		}
		
		if (valchange==1)
    18e8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <valchange>
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	39 f5       	brne	.+78     	; 0x193e <main+0xb9a>
		{ //ok

		    lcd_clrscr();
    18f0:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>

			if (menu==1)
    18f4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	61 f4       	brne	.+24     	; 0x1914 <main+0xb70>
			{
				lcd_puts("Length");
    18fc:	8c e0       	ldi	r24, 0x0C	; 12
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
				lcd_gotoxy(0,1);
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
				lcd_puts("mm:");
    190c:	83 e1       	ldi	r24, 0x13	; 19
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
			}

			if (menu==2)
    1914:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	61 f4       	brne	.+24     	; 0x1934 <main+0xb90>
			{
				lcd_puts("time");
    191c:	87 e1       	ldi	r24, 0x17	; 23
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
				lcd_gotoxy(0,1);
    1924:	61 e0       	ldi	r22, 0x01	; 1
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
				lcd_puts("mm:");
    192c:	83 e1       	ldi	r24, 0x13	; 19
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
			}

			refreshval=1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refreshval>
			valchange=0;
    193a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <valchange>

		}//valchange //ok

//*******************
		if (refreshval==1)
    193e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <refreshval>
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	11 f5       	brne	.+68     	; 0x198a <main+0xbe6>
		{
		int val;
			if (menu==1)    
    1946:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <menu>
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	31 f4       	brne	.+12     	; 0x195a <main+0xbb6>
				{
				val=temp_length;
    194e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <temp_length>
    1952:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <temp_length+0x1>
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
				}

				lcd_gotoxy(9,1);
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	89 e0       	ldi	r24, 0x09	; 9
    195e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <lcd_gotoxy>
				itoa(val, buffer, 10);
    1962:	9e 01       	movw	r18, r28
    1964:	28 5e       	subi	r18, 0xE8	; 232
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	4a e0       	ldi	r20, 0x0A	; 10
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	b9 01       	movw	r22, r18
    1972:	0e 94 99 13 	call	0x2732	; 0x2732 <itoa>
				lcd_puts(buffer);
    1976:	ce 01       	movw	r24, r28
    1978:	48 96       	adiw	r24, 0x18	; 24
    197a:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>
				lcd_puts(" ");
    197e:	8c e1       	ldi	r24, 0x1C	; 28
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	0e 94 30 11 	call	0x2260	; 0x2260 <lcd_puts>

			refreshval=0;
    1986:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <refreshval>
		} // refreshval		
		
	} //if (settings==1)


		if(START_PB==1||START_KEY>=10)
    198a:	80 e3       	ldi	r24, 0x30	; 48
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	fc 01       	movw	r30, r24
    1990:	80 81       	ld	r24, Z
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	84 70       	andi	r24, 0x04	; 4
    1998:	99 27       	eor	r25, r25
    199a:	89 2b       	or	r24, r25
    199c:	31 f0       	breq	.+12     	; 0x19aa <main+0xc06>
    199e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <key2press>
    19a2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <key2press+0x1>
    19a6:	0a 97       	sbiw	r24, 0x0a	; 10
    19a8:	84 f0       	brlt	.+32     	; 0x19ca <main+0xc26>
		{
			if (db1<1000)
    19aa:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <db1>
    19ae:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <db1+0x1>
    19b2:	88 3e       	cpi	r24, 0xE8	; 232
    19b4:	93 40       	sbci	r25, 0x03	; 3
    19b6:	48 f4       	brcc	.+18     	; 0x19ca <main+0xc26>
			db1++;
    19b8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <db1>
    19bc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <db1+0x1>
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <db1+0x1>
    19c6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <db1>
		}

		if(START_PB==0&&START_KEY==0)
    19ca:	80 e3       	ldi	r24, 0x30	; 48
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	fc 01       	movw	r30, r24
    19d0:	80 81       	ld	r24, Z
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	84 70       	andi	r24, 0x04	; 4
    19d8:	99 27       	eor	r25, r25
    19da:	89 2b       	or	r24, r25
    19dc:	99 f0       	breq	.+38     	; 0x1a04 <main+0xc60>
    19de:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <key2press>
    19e2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <key2press+0x1>
    19e6:	89 2b       	or	r24, r25
    19e8:	69 f4       	brne	.+26     	; 0x1a04 <main+0xc60>
		{
			if(db1>10)
    19ea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <db1>
    19ee:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <db1+0x1>
    19f2:	0b 97       	sbiw	r24, 0x0b	; 11
    19f4:	18 f0       	brcs	.+6      	; 0x19fc <main+0xc58>
			{
				run=1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <run>
			}
			db1=0;
    19fc:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <db1+0x1>
    1a00:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <db1>
		}		

		if(STOP_PB==1||STOP_KEY>=10)
    1a04:	80 e3       	ldi	r24, 0x30	; 48
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	fc 01       	movw	r30, r24
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	80 72       	andi	r24, 0x20	; 32
    1a12:	99 27       	eor	r25, r25
    1a14:	89 2b       	or	r24, r25
    1a16:	31 f0       	breq	.+12     	; 0x1a24 <main+0xc80>
    1a18:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <key1press>
    1a1c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <key1press+0x1>
    1a20:	0a 97       	sbiw	r24, 0x0a	; 10
    1a22:	84 f0       	brlt	.+32     	; 0x1a44 <main+0xca0>
		{
			if (db2<1000)
    1a24:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <db2>
    1a28:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <db2+0x1>
    1a2c:	88 3e       	cpi	r24, 0xE8	; 232
    1a2e:	93 40       	sbci	r25, 0x03	; 3
    1a30:	48 f4       	brcc	.+18     	; 0x1a44 <main+0xca0>
			db2++;
    1a32:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <db2>
    1a36:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <db2+0x1>
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <db2+0x1>
    1a40:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <db2>
		}

		if(STOP_PB==0&&STOP_KEY==0)
    1a44:	80 e3       	ldi	r24, 0x30	; 48
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	80 72       	andi	r24, 0x20	; 32
    1a52:	99 27       	eor	r25, r25
    1a54:	89 2b       	or	r24, r25
    1a56:	91 f0       	breq	.+36     	; 0x1a7c <main+0xcd8>
    1a58:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <key1press>
    1a5c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <key1press+0x1>
    1a60:	89 2b       	or	r24, r25
    1a62:	61 f4       	brne	.+24     	; 0x1a7c <main+0xcd8>
		{
			if(db2>10)
    1a64:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <db2>
    1a68:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <db2+0x1>
    1a6c:	0b 97       	sbiw	r24, 0x0b	; 11
    1a6e:	10 f0       	brcs	.+4      	; 0x1a74 <main+0xcd0>
			{
				run=0;
    1a70:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <run>
			}
			db2=0;
    1a74:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <db2+0x1>
    1a78:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <db2>
		}

///*******************  A  *************************
////////////        Main cycle      /////////

         if (a==10&&ra==0)
    1a7c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1a80:	8a 30       	cpi	r24, 0x0A	; 10
    1a82:	71 f4       	brne	.+28     	; 0x1aa0 <main+0xcfc>
    1a84:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1a88:	88 23       	and	r24, r24
    1a8a:	51 f4       	brne	.+20     	; 0x1aa0 <main+0xcfc>
         {
	         //if (HL_SENSOR==1) check if paper is available
			 if (run==1)
    1a8c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <run>
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <main+0xcf6>
	         a=20;
    1a94:	84 e1       	ldi	r24, 0x14	; 20
    1a96:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	         ra=1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         }

         if (a==20&&ra==0)
    1aa0:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1aa4:	84 31       	cpi	r24, 0x14	; 20
    1aa6:	51 f4       	brne	.+20     	; 0x1abc <main+0xd18>
    1aa8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1aac:	88 23       	and	r24, r24
    1aae:	31 f4       	brne	.+12     	; 0x1abc <main+0xd18>
         {
	         //if (PAPER_SENSOR==1) check if paper is available
	         a=30;
    1ab0:	8e e1       	ldi	r24, 0x1E	; 30
    1ab2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	         ra=1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         }

         if (a==30&&ra==0)
    1abc:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1ac0:	8e 31       	cpi	r24, 0x1E	; 30
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <main+0xd22>
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <main+0xda0>
    1ac6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1aca:	88 23       	and	r24, r24
    1acc:	d9 f5       	brne	.+118    	; 0x1b44 <main+0xda0>
         {
			 steps=2*(length/mm_per_step);
    1ace:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <length>
    1ad2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <length+0x1>
    1ad6:	cc 01       	movw	r24, r24
    1ad8:	a0 e0       	ldi	r26, 0x00	; 0
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1ae4:	7b 01       	movw	r14, r22
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <mm_per_step>
    1aec:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <mm_per_step+0x1>
    1af0:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <mm_per_step+0x2>
    1af4:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <mm_per_step+0x3>
    1af8:	9c 01       	movw	r18, r24
    1afa:	ad 01       	movw	r20, r26
    1afc:	c8 01       	movw	r24, r16
    1afe:	b7 01       	movw	r22, r14
    1b00:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__divsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9c 01       	movw	r18, r24
    1b0a:	ad 01       	movw	r20, r26
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 91 11 	call	0x2322	; 0x2322 <__addsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <steps+0x1>
    1b28:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <steps>
			 runsteps(steps);
    1b2c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <steps>
    1b30:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <steps+0x1>
    1b34:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <runsteps>
		     a=40;
    1b38:	88 e2       	ldi	r24, 0x28	; 40
    1b3a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	         ra=1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         }

         if (a==40&&ra==0)
    1b44:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1b48:	88 32       	cpi	r24, 0x28	; 40
    1b4a:	71 f4       	brne	.+28     	; 0x1b68 <main+0xdc4>
    1b4c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1b50:	88 23       	and	r24, r24
    1b52:	51 f4       	brne	.+20     	; 0x1b68 <main+0xdc4>
         {
			if(cd4046_motorrun==0)
    1b54:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cd4046_motorrun>
    1b58:	88 23       	and	r24, r24
    1b5a:	19 f4       	brne	.+6      	; 0x1b62 <main+0xdbe>
			{
				a=50;
    1b5c:	82 e3       	ldi	r24, 0x32	; 50
    1b5e:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
			}
	         ra=1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         }		 

         if (a==50&&ra==0)
    1b68:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1b6c:	82 33       	cpi	r24, 0x32	; 50
    1b6e:	69 f4       	brne	.+26     	; 0x1b8a <main+0xde6>
    1b70:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1b74:	88 23       	and	r24, r24
    1b76:	49 f4       	brne	.+18     	; 0x1b8a <main+0xde6>
         {
	         if(za>0)
    1b78:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <za>
    1b7c:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <za+0x1>
    1b80:	89 2b       	or	r24, r25
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <main+0xde6>
	         {
		         ra=1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
	         }
         }

         if (a==50&&ra==0)
    1b8a:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1b8e:	82 33       	cpi	r24, 0x32	; 50
    1b90:	69 f4       	brne	.+26     	; 0x1bac <main+0xe08>
    1b92:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1b96:	88 23       	and	r24, r24
    1b98:	49 f4       	brne	.+18     	; 0x1bac <main+0xe08>
         {
	         b=10; //PUNCHING CYCLE
    1b9a:	8a e0       	ldi	r24, 0x0A	; 10
    1b9c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <b>
	         a=60;
    1ba0:	8c e3       	ldi	r24, 0x3C	; 60
    1ba2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	         ra=1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         }
         
         if (a==60&&ra==0)
    1bac:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1bb0:	8c 33       	cpi	r24, 0x3C	; 60
    1bb2:	71 f4       	brne	.+28     	; 0x1bd0 <main+0xe2c>
    1bb4:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1bb8:	88 23       	and	r24, r24
    1bba:	51 f4       	brne	.+20     	; 0x1bd0 <main+0xe2c>
         {
	         if(b==0) // check punching cycle completion
    1bbc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <b>
    1bc0:	88 23       	and	r24, r24
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <main+0xe26>
	         {
		         a=70;
    1bc4:	86 e4       	ldi	r24, 0x46	; 70
    1bc6:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	         }
	         ra=1;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         } 
 
         if (a==70&&ra==0)
    1bd0:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <a>
    1bd4:	86 34       	cpi	r24, 0x46	; 70
    1bd6:	51 f4       	brne	.+20     	; 0x1bec <main+0xe48>
    1bd8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <ra>
    1bdc:	88 23       	and	r24, r24
    1bde:	31 f4       	brne	.+12     	; 0x1bec <main+0xe48>
         {
		     a=10;
    1be0:	8a e0       	ldi	r24, 0x0A	; 10
    1be2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <a>
	         ra=1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ra>
         }	
 
 
      ra=0;
    1bec:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <ra>

///*******************  B  *************************
////////////        Punching cycle      /////////

         if (b==10&&rb==0)
    1bf0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <b>
    1bf4:	8a 30       	cpi	r24, 0x0A	; 10
    1bf6:	69 f4       	brne	.+26     	; 0x1c12 <main+0xe6e>
    1bf8:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rb>
    1bfc:	88 23       	and	r24, r24
    1bfe:	49 f4       	brne	.+18     	; 0x1c12 <main+0xe6e>
         {
	         if(zb>0)
    1c00:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <zb>
    1c04:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <zb+0x1>
    1c08:	89 2b       	or	r24, r25
    1c0a:	19 f0       	breq	.+6      	; 0x1c12 <main+0xe6e>
	         {
		         rb=1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rb>
	         }
         }

         if (b==10&&rb==0)
    1c12:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <b>
    1c16:	8a 30       	cpi	r24, 0x0A	; 10
    1c18:	99 f4       	brne	.+38     	; 0x1c40 <main+0xe9c>
    1c1a:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rb>
    1c1e:	88 23       	and	r24, r24
    1c20:	79 f4       	brne	.+30     	; 0x1c40 <main+0xe9c>
         {
	         PUNCH_MOTOR_ON;
    1c22:	85 e3       	ldi	r24, 0x35	; 53
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	25 e3       	ldi	r18, 0x35	; 53
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	20 81       	ld	r18, Z
    1c2e:	28 60       	ori	r18, 0x08	; 8
    1c30:	fc 01       	movw	r30, r24
    1c32:	20 83       	st	Z, r18
	         b=20;
    1c34:	84 e1       	ldi	r24, 0x14	; 20
    1c36:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <b>
	         rb=1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rb>
         }

         if (b==20&&rb==0)
    1c40:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <b>
    1c44:	84 31       	cpi	r24, 0x14	; 20
    1c46:	a1 f4       	brne	.+40     	; 0x1c70 <main+0xecc>
    1c48:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rb>
    1c4c:	88 23       	and	r24, r24
    1c4e:	81 f4       	brne	.+32     	; 0x1c70 <main+0xecc>
         {
	         if(PUNCH_HOME_SENSOR==0)
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	fc 01       	movw	r30, r24
    1c56:	80 81       	ld	r24, Z
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	80 74       	andi	r24, 0x40	; 64
    1c5e:	99 27       	eor	r25, r25
    1c60:	89 2b       	or	r24, r25
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <main+0xec6>
			 {
				 b=30;
    1c64:	8e e1       	ldi	r24, 0x1E	; 30
    1c66:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <b>
			 }
	         rb=1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rb>
         }

         if (b==30&&rb==0)
    1c70:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <b>
    1c74:	8e 31       	cpi	r24, 0x1E	; 30
    1c76:	e9 f4       	brne	.+58     	; 0x1cb2 <main+0xf0e>
    1c78:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rb>
    1c7c:	88 23       	and	r24, r24
    1c7e:	c9 f4       	brne	.+50     	; 0x1cb2 <main+0xf0e>
         {
	         if(PUNCH_HOME_SENSOR==1)
    1c80:	80 e3       	ldi	r24, 0x30	; 48
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fc 01       	movw	r30, r24
    1c86:	80 81       	ld	r24, Z
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	80 74       	andi	r24, 0x40	; 64
    1c8e:	99 27       	eor	r25, r25
    1c90:	89 2b       	or	r24, r25
    1c92:	61 f4       	brne	.+24     	; 0x1cac <main+0xf08>
	         {
		         b=40;
    1c94:	88 e2       	ldi	r24, 0x28	; 40
    1c96:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <b>
				 PUNCH_MOTOR_OFF;
    1c9a:	85 e3       	ldi	r24, 0x35	; 53
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	25 e3       	ldi	r18, 0x35	; 53
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	20 81       	ld	r18, Z
    1ca6:	27 7f       	andi	r18, 0xF7	; 247
    1ca8:	fc 01       	movw	r30, r24
    1caa:	20 83       	st	Z, r18
	         }
	         rb=1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rb>
         }

         if (b==40&&rb==0)
    1cb2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <b>
    1cb6:	88 32       	cpi	r24, 0x28	; 40
    1cb8:	49 f4       	brne	.+18     	; 0x1ccc <main+0xf28>
    1cba:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rb>
    1cbe:	88 23       	and	r24, r24
    1cc0:	29 f4       	brne	.+10     	; 0x1ccc <main+0xf28>
         {
		     b=0;
    1cc2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <b>
	         rb=1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rb>
         }

          rb=0;
    1ccc:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <rb>

///*******************  C  *************************
////////////        Dancing Roller cycle      /////////

         if (c==10&&rc==0)
    1cd0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <c>
    1cd4:	8a 30       	cpi	r24, 0x0A	; 10
    1cd6:	d9 f4       	brne	.+54     	; 0x1d0e <main+0xf6a>
    1cd8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <rc>
    1cdc:	88 23       	and	r24, r24
    1cde:	b9 f4       	brne	.+46     	; 0x1d0e <main+0xf6a>
         {
			 if (HL_SENSOR==0)
    1ce0:	83 e3       	ldi	r24, 0x33	; 51
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	80 74       	andi	r24, 0x40	; 64
    1cee:	99 27       	eor	r25, r25
    1cf0:	89 2b       	or	r24, r25
    1cf2:	39 f0       	breq	.+14     	; 0x1d02 <main+0xf5e>
	         {
				run_pmdc_motor=1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <run_pmdc_motor>
				c=20;
    1cfa:	84 e1       	ldi	r24, 0x14	; 20
    1cfc:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <c>
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <main+0xf64>
			 }
			 else
			 {
				c=20; 
    1d02:	84 e1       	ldi	r24, 0x14	; 20
    1d04:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <c>
			 }
	         rc=1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <rc>
         }

         if (c==20&&rc==0)
    1d0e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <c>
    1d12:	84 31       	cpi	r24, 0x14	; 20
    1d14:	b1 f4       	brne	.+44     	; 0x1d42 <main+0xf9e>
    1d16:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <rc>
    1d1a:	88 23       	and	r24, r24
    1d1c:	91 f4       	brne	.+36     	; 0x1d42 <main+0xf9e>
         {
	        if(HL_SENSOR==1)
    1d1e:	83 e3       	ldi	r24, 0x33	; 51
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	fc 01       	movw	r30, r24
    1d24:	80 81       	ld	r24, Z
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	80 74       	andi	r24, 0x40	; 64
    1d2c:	99 27       	eor	r25, r25
    1d2e:	89 2b       	or	r24, r25
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <main+0xf98>
		    {
			    run_pmdc_motor=0;
    1d32:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <run_pmdc_motor>
			    c=30;
    1d36:	8e e1       	ldi	r24, 0x1E	; 30
    1d38:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <c>
		    }
	         rc=1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <rc>
         }

         if (c==30&&rc==0)
    1d42:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <c>
    1d46:	8e 31       	cpi	r24, 0x1E	; 30
    1d48:	99 f4       	brne	.+38     	; 0x1d70 <main+0xfcc>
    1d4a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <rc>
    1d4e:	88 23       	and	r24, r24
    1d50:	79 f4       	brne	.+30     	; 0x1d70 <main+0xfcc>
         {
	         if(LL_SENSOR==1)
    1d52:	83 e3       	ldi	r24, 0x33	; 51
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	fc 01       	movw	r30, r24
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 23       	and	r24, r24
    1d5c:	34 f0       	brlt	.+12     	; 0x1d6a <main+0xfc6>
	         {
		         run_pmdc_motor=1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <run_pmdc_motor>
		         c=20;
    1d64:	84 e1       	ldi	r24, 0x14	; 20
    1d66:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <c>
	         }
	         rc=1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <rc>
         }

      rc=0;
    1d70:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <rc>

		}//while
    1d74:	30 cb       	rjmp	.-2464   	; 0x13d6 <main+0x632>

00001d76 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <_delayFourCycles+0x6>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	89 2b       	or	r24, r25
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <_delayFourCycles+0x18>
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
    1d8e:	06 c0       	rjmp	.+12     	; 0x1d9c <_delayFourCycles+0x26>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <_delayFourCycles+0x1e>
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
    1d9c:	00 00       	nop
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <lcd_command>:




void lcd_command( unsigned char cmnd )
{
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	1f 92       	push	r1
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	89 83       	std	Y+1, r24	; 0x01
	LCD_PORT = (LCD_PORT & 0x0F) | (cmnd & 0xF0); /* sending upper nibble on port b*/
    1db4:	88 e3       	ldi	r24, 0x38	; 56
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	28 e3       	ldi	r18, 0x38	; 56
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	20 81       	ld	r18, Z
    1dc0:	32 2f       	mov	r19, r18
    1dc2:	3f 70       	andi	r19, 0x0F	; 15
    1dc4:	29 81       	ldd	r18, Y+1	; 0x01
    1dc6:	20 7f       	andi	r18, 0xF0	; 240
    1dc8:	23 2b       	or	r18, r19
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 83       	st	Z, r18
	lcd_rs_low() ;								  /* RS=0, command reg. */
    1dce:	88 e3       	ldi	r24, 0x38	; 56
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	28 e3       	ldi	r18, 0x38	; 56
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	f9 01       	movw	r30, r18
    1dd8:	20 81       	ld	r18, Z
    1dda:	2e 7f       	andi	r18, 0xFE	; 254
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 83       	st	Z, r18
	lcd_e_high();	
    1de0:	88 e3       	ldi	r24, 0x38	; 56
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	28 e3       	ldi	r18, 0x38	; 56
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	f9 01       	movw	r30, r18
    1dea:	20 81       	ld	r18, Z
    1dec:	28 60       	ori	r18, 0x08	; 8
    1dee:	fc 01       	movw	r30, r24
    1df0:	20 83       	st	Z, r18
	lcd_e_delay();							      /* Enable pulse */
    1df2:	00 c0       	rjmp	.+0      	; 0x1df4 <lcd_command+0x4c>
	lcd_e_low();  								  /* disable pulse */
    1df4:	88 e3       	ldi	r24, 0x38	; 56
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	28 e3       	ldi	r18, 0x38	; 56
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	20 81       	ld	r18, Z
    1e00:	27 7f       	andi	r18, 0xF7	; 247
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18
	 
	 
	
	delay(2);
    1e06:	85 e0       	ldi	r24, 0x05	; 5
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_delayFourCycles>
	
	LCD_PORT = (LCD_PORT & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    1e0e:	88 e3       	ldi	r24, 0x38	; 56
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	28 e3       	ldi	r18, 0x38	; 56
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	f9 01       	movw	r30, r18
    1e18:	20 81       	ld	r18, Z
    1e1a:	42 2f       	mov	r20, r18
    1e1c:	4f 70       	andi	r20, 0x0F	; 15
    1e1e:	29 81       	ldd	r18, Y+1	; 0x01
    1e20:	22 2f       	mov	r18, r18
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	22 95       	swap	r18
    1e26:	32 95       	swap	r19
    1e28:	30 7f       	andi	r19, 0xF0	; 240
    1e2a:	32 27       	eor	r19, r18
    1e2c:	20 7f       	andi	r18, 0xF0	; 240
    1e2e:	32 27       	eor	r19, r18
    1e30:	24 2b       	or	r18, r20
    1e32:	fc 01       	movw	r30, r24
    1e34:	20 83       	st	Z, r18
	lcd_e_high();	
    1e36:	88 e3       	ldi	r24, 0x38	; 56
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	28 e3       	ldi	r18, 0x38	; 56
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	f9 01       	movw	r30, r18
    1e40:	20 81       	ld	r18, Z
    1e42:	28 60       	ori	r18, 0x08	; 8
    1e44:	fc 01       	movw	r30, r24
    1e46:	20 83       	st	Z, r18
	lcd_e_delay();							  /* Enable pulse */
    1e48:	00 c0       	rjmp	.+0      	; 0x1e4a <lcd_command+0xa2>
	lcd_e_low();  							 /* disable pulse */
    1e4a:	88 e3       	ldi	r24, 0x38	; 56
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	28 e3       	ldi	r18, 0x38	; 56
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	f9 01       	movw	r30, r18
    1e54:	20 81       	ld	r18, Z
    1e56:	27 7f       	andi	r18, 0xF7	; 247
    1e58:	fc 01       	movw	r30, r24
    1e5a:	20 83       	st	Z, r18
	 
	 
	//_delay_ms(2);
	delay(2000); //ms
    1e5c:	88 e9       	ldi	r24, 0x98	; 152
    1e5e:	95 e1       	ldi	r25, 0x15	; 21
    1e60:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_delayFourCycles>
	
	/* all data pins high (inactive) */
	
	/*LCD_PORT=(LCD_PORT & 0x0F) | 0x0F */
	 
}
    1e64:	00 00       	nop
    1e66:	0f 90       	pop	r0
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <lcd_putc>:


void lcd_putc( unsigned char data )
{
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	64 97       	sbiw	r28, 0x14	; 20
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	8c 8b       	std	Y+20, r24	; 0x14
	
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0); /* sending upper nibble on port b*/
    1e84:	88 e3       	ldi	r24, 0x38	; 56
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	28 e3       	ldi	r18, 0x38	; 56
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	20 81       	ld	r18, Z
    1e90:	32 2f       	mov	r19, r18
    1e92:	3f 70       	andi	r19, 0x0F	; 15
    1e94:	2c 89       	ldd	r18, Y+20	; 0x14
    1e96:	20 7f       	andi	r18, 0xF0	; 240
    1e98:	23 2b       	or	r18, r19
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	20 83       	st	Z, r18
	lcd_rs_high() ;								  /* RS=0, command reg. */
    1e9e:	88 e3       	ldi	r24, 0x38	; 56
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	28 e3       	ldi	r18, 0x38	; 56
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	20 81       	ld	r18, Z
    1eaa:	21 60       	ori	r18, 0x01	; 1
    1eac:	fc 01       	movw	r30, r24
    1eae:	20 83       	st	Z, r18
	lcd_e_high();		
    1eb0:	88 e3       	ldi	r24, 0x38	; 56
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	28 e3       	ldi	r18, 0x38	; 56
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	f9 01       	movw	r30, r18
    1eba:	20 81       	ld	r18, Z
    1ebc:	28 60       	ori	r18, 0x08	; 8
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	20 83       	st	Z, r18
	lcd_e_delay();						  /* Enable pulse */
    1ec2:	00 c0       	rjmp	.+0      	; 0x1ec4 <lcd_putc+0x56>
	lcd_e_low();  								  /* disable pulse */
    1ec4:	88 e3       	ldi	r24, 0x38	; 56
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	28 e3       	ldi	r18, 0x38	; 56
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	f9 01       	movw	r30, r18
    1ece:	20 81       	ld	r18, Z
    1ed0:	27 7f       	andi	r18, 0xF7	; 247
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	20 83       	st	Z, r18
	 
	 
    delay(2); ///us
    1ed6:	85 e0       	ldi	r24, 0x05	; 5
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_delayFourCycles>
	
	
	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);  /* sending lower nibble */
    1ede:	88 e3       	ldi	r24, 0x38	; 56
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	28 e3       	ldi	r18, 0x38	; 56
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	20 81       	ld	r18, Z
    1eea:	42 2f       	mov	r20, r18
    1eec:	4f 70       	andi	r20, 0x0F	; 15
    1eee:	2c 89       	ldd	r18, Y+20	; 0x14
    1ef0:	22 2f       	mov	r18, r18
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	22 95       	swap	r18
    1ef6:	32 95       	swap	r19
    1ef8:	30 7f       	andi	r19, 0xF0	; 240
    1efa:	32 27       	eor	r19, r18
    1efc:	20 7f       	andi	r18, 0xF0	; 240
    1efe:	32 27       	eor	r19, r18
    1f00:	24 2b       	or	r18, r20
    1f02:	fc 01       	movw	r30, r24
    1f04:	20 83       	st	Z, r18
	lcd_e_high();								  /* Enable pulse */
    1f06:	88 e3       	ldi	r24, 0x38	; 56
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	28 e3       	ldi	r18, 0x38	; 56
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	f9 01       	movw	r30, r18
    1f10:	20 81       	ld	r18, Z
    1f12:	28 60       	ori	r18, 0x08	; 8
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
    lcd_e_delay();
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <lcd_putc+0xac>
	lcd_e_low();  								  /* disable pulse */
    1f1a:	88 e3       	ldi	r24, 0x38	; 56
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	28 e3       	ldi	r18, 0x38	; 56
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	f9 01       	movw	r30, r18
    1f24:	20 81       	ld	r18, Z
    1f26:	27 7f       	andi	r18, 0xF7	; 247
    1f28:	fc 01       	movw	r30, r24
    1f2a:	20 83       	st	Z, r18
 *
 */
static __inline__ void
_delay_cycles(const double __ticks_d)
{
    uint32_t __ticks = (uint32_t)(__ticks_d);
    1f2c:	86 e1       	ldi	r24, 0x16	; 22
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a0 e0       	ldi	r26, 0x00	; 0
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	ab 83       	std	Y+3, r26	; 0x03
    1f3a:	bc 83       	std	Y+4, r27	; 0x04

    /*
     * Special optimization for very
     * small delays - not using any register.
     */
    if( __ticks <= 12 )  {              /* this can be done with 4 opcodes      */
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	ab 81       	ldd	r26, Y+3	; 0x03
    1f42:	bc 81       	ldd	r27, Y+4	; 0x04
    1f44:	0d 97       	sbiw	r24, 0x0d	; 13
    1f46:	a1 05       	cpc	r26, r1
    1f48:	b1 05       	cpc	r27, r1
    1f4a:	48 f4       	brcc	.+18     	; 0x1f5e <lcd_putc+0xf0>
        __padding = __ticks;
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	ab 81       	ldd	r26, Y+3	; 0x03
    1f52:	bc 81       	ldd	r27, Y+4	; 0x04
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	af 83       	std	Y+7, r26	; 0x07
    1f5a:	b8 87       	std	Y+8, r27	; 0x08
    1f5c:	cb c0       	rjmp	.+406    	; 0x20f4 <lcd_putc+0x286>

    /* create a single byte counter */
    } else if( __ticks <= 0x400 )  {
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	ab 81       	ldd	r26, Y+3	; 0x03
    1f64:	bc 81       	ldd	r27, Y+4	; 0x04
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	94 40       	sbci	r25, 0x04	; 4
    1f6a:	a1 05       	cpc	r26, r1
    1f6c:	b1 05       	cpc	r27, r1
    1f6e:	c0 f5       	brcc	.+112    	; 0x1fe0 <lcd_putc+0x172>
        __ticks -= 1;                   /* caller needs 1 cycle to init counter */
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	ab 81       	ldd	r26, Y+3	; 0x03
    1f76:	bc 81       	ldd	r27, Y+4	; 0x04
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	a1 09       	sbc	r26, r1
    1f7c:	b1 09       	sbc	r27, r1
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	ab 83       	std	Y+3, r26	; 0x03
    1f84:	bc 83       	std	Y+4, r27	; 0x04
        __loops = __ticks / 4;
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f8c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f8e:	b6 95       	lsr	r27
    1f90:	a7 95       	ror	r26
    1f92:	97 95       	ror	r25
    1f94:	87 95       	ror	r24
    1f96:	b6 95       	lsr	r27
    1f98:	a7 95       	ror	r26
    1f9a:	97 95       	ror	r25
    1f9c:	87 95       	ror	r24
    1f9e:	89 87       	std	Y+9, r24	; 0x09
    1fa0:	9a 87       	std	Y+10, r25	; 0x0a
    1fa2:	ab 87       	std	Y+11, r26	; 0x0b
    1fa4:	bc 87       	std	Y+12, r27	; 0x0c
        __padding = __ticks % 4;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	ab 81       	ldd	r26, Y+3	; 0x03
    1fac:	bc 81       	ldd	r27, Y+4	; 0x04
    1fae:	83 70       	andi	r24, 0x03	; 3
    1fb0:	99 27       	eor	r25, r25
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	bb 27       	eor	r27, r27
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	af 83       	std	Y+7, r26	; 0x07
    1fbc:	b8 87       	std	Y+8, r27	; 0x08
        if( __loops != 0 )
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fc4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fc6:	89 2b       	or	r24, r25
    1fc8:	8a 2b       	or	r24, r26
    1fca:	8b 2b       	or	r24, r27
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <lcd_putc+0x162>
    1fce:	92 c0       	rjmp	.+292    	; 0x20f4 <lcd_putc+0x286>
            _delay_loop_1_x( (uint8_t)__loops );
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	8d 87       	std	Y+13, r24	; 0x0d
 *
 */
static __inline__ void      /* exactly 4 cycles/loop, max 2**8 loops */
_delay_loop_1_x( uint8_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	8a 95       	dec	r24
    1fd8:	01 f0       	breq	.+0      	; 0x1fda <lcd_putc+0x16c>
    1fda:	e9 f7       	brne	.-6      	; 0x1fd6 <lcd_putc+0x168>
    1fdc:	8d 87       	std	Y+13, r24	; 0x0d
    1fde:	8a c0       	rjmp	.+276    	; 0x20f4 <lcd_putc+0x286>
        __padding = __ticks % 4;
        if( __loops != 0 )
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fe6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fe8:	02 97       	sbiw	r24, 0x02	; 2
    1fea:	a4 40       	sbci	r26, 0x04	; 4
    1fec:	b1 05       	cpc	r27, r1
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <lcd_putc+0x184>
    1ff0:	3c c0       	rjmp	.+120    	; 0x206a <lcd_putc+0x1fc>
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    1ffa:	02 97       	sbiw	r24, 0x02	; 2
    1ffc:	a1 09       	sbc	r26, r1
    1ffe:	b1 09       	sbc	r27, r1
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	ab 83       	std	Y+3, r26	; 0x03
    2006:	bc 83       	std	Y+4, r27	; 0x04
        __loops = __ticks / 4;
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	ab 81       	ldd	r26, Y+3	; 0x03
    200e:	bc 81       	ldd	r27, Y+4	; 0x04
    2010:	b6 95       	lsr	r27
    2012:	a7 95       	ror	r26
    2014:	97 95       	ror	r25
    2016:	87 95       	ror	r24
    2018:	b6 95       	lsr	r27
    201a:	a7 95       	ror	r26
    201c:	97 95       	ror	r25
    201e:	87 95       	ror	r24
    2020:	89 87       	std	Y+9, r24	; 0x09
    2022:	9a 87       	std	Y+10, r25	; 0x0a
    2024:	ab 87       	std	Y+11, r26	; 0x0b
    2026:	bc 87       	std	Y+12, r27	; 0x0c
        __padding = __ticks % 4;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	ab 81       	ldd	r26, Y+3	; 0x03
    202e:	bc 81       	ldd	r27, Y+4	; 0x04
    2030:	83 70       	andi	r24, 0x03	; 3
    2032:	99 27       	eor	r25, r25
    2034:	aa 27       	eor	r26, r26
    2036:	bb 27       	eor	r27, r27
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	af 83       	std	Y+7, r26	; 0x07
    203e:	b8 87       	std	Y+8, r27	; 0x08
        if( __loops != 0 )
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	ab 85       	ldd	r26, Y+11	; 0x0b
    2046:	bc 85       	ldd	r27, Y+12	; 0x0c
    2048:	89 2b       	or	r24, r25
    204a:	8a 2b       	or	r24, r26
    204c:	8b 2b       	or	r24, r27
    204e:	09 f4       	brne	.+2      	; 0x2052 <lcd_putc+0x1e4>
    2050:	51 c0       	rjmp	.+162    	; 0x20f4 <lcd_putc+0x286>
            _delay_loop_2_x( (uint16_t)__loops );
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	9f 87       	std	Y+15, r25	; 0x0f
    2058:	8e 87       	std	Y+14, r24	; 0x0e
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    205a:	8e 85       	ldd	r24, Y+14	; 0x0e
    205c:	9f 85       	ldd	r25, Y+15	; 0x0f
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <lcd_putc+0x1f0>
    2062:	00 00       	nop
    2064:	9f 87       	std	Y+15, r25	; 0x0f
    2066:	8e 87       	std	Y+14, r24	; 0x0e
    2068:	45 c0       	rjmp	.+138    	; 0x20f4 <lcd_putc+0x286>
        if( __loops != 0 )
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	ab 81       	ldd	r26, Y+3	; 0x03
    2070:	bc 81       	ldd	r27, Y+4	; 0x04
    2072:	04 97       	sbiw	r24, 0x04	; 4
    2074:	a1 09       	sbc	r26, r1
    2076:	b1 09       	sbc	r27, r1
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	ab 83       	std	Y+3, r26	; 0x03
    207e:	bc 83       	std	Y+4, r27	; 0x04
        __loops = __ticks / 8;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	ab 81       	ldd	r26, Y+3	; 0x03
    2086:	bc 81       	ldd	r27, Y+4	; 0x04
    2088:	68 94       	set
    208a:	12 f8       	bld	r1, 2
    208c:	b6 95       	lsr	r27
    208e:	a7 95       	ror	r26
    2090:	97 95       	ror	r25
    2092:	87 95       	ror	r24
    2094:	16 94       	lsr	r1
    2096:	d1 f7       	brne	.-12     	; 0x208c <lcd_putc+0x21e>
    2098:	89 87       	std	Y+9, r24	; 0x09
    209a:	9a 87       	std	Y+10, r25	; 0x0a
    209c:	ab 87       	std	Y+11, r26	; 0x0b
    209e:	bc 87       	std	Y+12, r27	; 0x0c
        __padding = __ticks % 8;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	ab 81       	ldd	r26, Y+3	; 0x03
    20a6:	bc 81       	ldd	r27, Y+4	; 0x04
    20a8:	87 70       	andi	r24, 0x07	; 7
    20aa:	99 27       	eor	r25, r25
    20ac:	aa 27       	eor	r26, r26
    20ae:	bb 27       	eor	r27, r27
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	af 83       	std	Y+7, r26	; 0x07
    20b6:	b8 87       	std	Y+8, r27	; 0x08
        if( __loops != 0 )
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    20be:	bc 85       	ldd	r27, Y+12	; 0x0c
    20c0:	89 2b       	or	r24, r25
    20c2:	8a 2b       	or	r24, r26
    20c4:	8b 2b       	or	r24, r27
    20c6:	b1 f0       	breq	.+44     	; 0x20f4 <lcd_putc+0x286>
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    20ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    20d0:	88 8b       	std	Y+16, r24	; 0x10
    20d2:	99 8b       	std	Y+17, r25	; 0x11
    20d4:	aa 8b       	std	Y+18, r26	; 0x12
    20d6:	bb 8b       	std	Y+19, r27	; 0x13
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    20d8:	88 89       	ldd	r24, Y+16	; 0x10
    20da:	99 89       	ldd	r25, Y+17	; 0x11
    20dc:	aa 89       	ldd	r26, Y+18	; 0x12
    20de:	bb 89       	ldd	r27, Y+19	; 0x13
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	a1 09       	sbc	r26, r1
    20e4:	b1 09       	sbc	r27, r1
    20e6:	00 00       	nop
    20e8:	01 f0       	breq	.+0      	; 0x20ea <lcd_putc+0x27c>
    20ea:	d1 f7       	brne	.-12     	; 0x20e0 <lcd_putc+0x272>
    20ec:	88 8b       	std	Y+16, r24	; 0x10
    20ee:	99 8b       	std	Y+17, r25	; 0x11
    20f0:	aa 8b       	std	Y+18, r26	; 0x12
    20f2:	bb 8b       	std	Y+19, r27	; 0x13
        __padding = __ticks % 8;
        if( __loops != 0 )
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	af 81       	ldd	r26, Y+7	; 0x07
    20fa:	b8 85       	ldd	r27, Y+8	; 0x08
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	a1 05       	cpc	r26, r1
    2100:	b1 05       	cpc	r27, r1
    2102:	09 f4       	brne	.+2      	; 0x2106 <lcd_putc+0x298>
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    2104:	00 00       	nop
        if( __loops != 0 )
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	af 81       	ldd	r26, Y+7	; 0x07
    210c:	b8 85       	ldd	r27, Y+8	; 0x08
    210e:	02 97       	sbiw	r24, 0x02	; 2
    2110:	a1 05       	cpc	r26, r1
    2112:	b1 05       	cpc	r27, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <lcd_putc+0x2aa>
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2116:	00 c0       	rjmp	.+0      	; 0x2118 <lcd_putc+0x2aa>
            _delay_loop_3_x( (uint32_t)__loops );
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	af 81       	ldd	r26, Y+7	; 0x07
    211e:	b8 85       	ldd	r27, Y+8	; 0x08
    2120:	03 97       	sbiw	r24, 0x03	; 3
    2122:	a1 05       	cpc	r26, r1
    2124:	b1 05       	cpc	r27, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <lcd_putc+0x2bc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    2128:	c8 95       	lpm
    }

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	af 81       	ldd	r26, Y+7	; 0x07
    2130:	b8 85       	ldd	r27, Y+8	; 0x08
    2132:	04 97       	sbiw	r24, 0x04	; 4
    2134:	a1 05       	cpc	r26, r1
    2136:	b1 05       	cpc	r27, r1
    2138:	11 f4       	brne	.+4      	; 0x213e <lcd_putc+0x2d0>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    213a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    213c:	00 00       	nop

    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	af 81       	ldd	r26, Y+7	; 0x07
    2144:	b8 85       	ldd	r27, Y+8	; 0x08
    2146:	05 97       	sbiw	r24, 0x05	; 5
    2148:	a1 05       	cpc	r26, r1
    214a:	b1 05       	cpc	r27, r1
    214c:	11 f4       	brne	.+4      	; 0x2152 <lcd_putc+0x2e4>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    214e:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2150:	00 c0       	rjmp	.+0      	; 0x2152 <lcd_putc+0x2e4>
    if( __padding ==  1 )  _NOP1();
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	af 81       	ldd	r26, Y+7	; 0x07
    2158:	b8 85       	ldd	r27, Y+8	; 0x08
    215a:	06 97       	sbiw	r24, 0x06	; 6
    215c:	a1 05       	cpc	r26, r1
    215e:	b1 05       	cpc	r27, r1
    2160:	11 f4       	brne	.+4      	; 0x2166 <lcd_putc+0x2f8>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    2162:	c8 95       	lpm
    2164:	c8 95       	lpm
    if( __padding ==  2 )  _NOP2();
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	af 81       	ldd	r26, Y+7	; 0x07
    216c:	b8 85       	ldd	r27, Y+8	; 0x08
    216e:	07 97       	sbiw	r24, 0x07	; 7
    2170:	a1 05       	cpc	r26, r1
    2172:	b1 05       	cpc	r27, r1
    2174:	19 f4       	brne	.+6      	; 0x217c <lcd_putc+0x30e>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    2176:	c8 95       	lpm
    2178:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    217a:	00 00       	nop
    if( __padding ==  3 )  _NOP3();
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	af 81       	ldd	r26, Y+7	; 0x07
    2182:	b8 85       	ldd	r27, Y+8	; 0x08
    2184:	08 97       	sbiw	r24, 0x08	; 8
    2186:	a1 05       	cpc	r26, r1
    2188:	b1 05       	cpc	r27, r1
    218a:	19 f4       	brne	.+6      	; 0x2192 <lcd_putc+0x324>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    218c:	c8 95       	lpm
    218e:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2190:	00 c0       	rjmp	.+0      	; 0x2192 <lcd_putc+0x324>
    if( __padding ==  4 )  _NOP4();
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	af 81       	ldd	r26, Y+7	; 0x07
    2198:	b8 85       	ldd	r27, Y+8	; 0x08
    219a:	09 97       	sbiw	r24, 0x09	; 9
    219c:	a1 05       	cpc	r26, r1
    219e:	b1 05       	cpc	r27, r1
    21a0:	19 f4       	brne	.+6      	; 0x21a8 <lcd_putc+0x33a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    21a2:	c8 95       	lpm
    21a4:	c8 95       	lpm
    21a6:	c8 95       	lpm
    if( __padding ==  5 )  _NOP5();
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	af 81       	ldd	r26, Y+7	; 0x07
    21ae:	b8 85       	ldd	r27, Y+8	; 0x08
    21b0:	0a 97       	sbiw	r24, 0x0a	; 10
    21b2:	a1 05       	cpc	r26, r1
    21b4:	b1 05       	cpc	r27, r1
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <lcd_putc+0x352>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    21b8:	c8 95       	lpm
    21ba:	c8 95       	lpm
    21bc:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    21be:	00 00       	nop
    if( __padding ==  6 )  _NOP6();
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    if( __padding == 11 ) _NOP11();
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	af 81       	ldd	r26, Y+7	; 0x07
    21c6:	b8 85       	ldd	r27, Y+8	; 0x08
    21c8:	0b 97       	sbiw	r24, 0x0b	; 11
    21ca:	a1 05       	cpc	r26, r1
    21cc:	b1 05       	cpc	r27, r1
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <lcd_putc+0x36a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    21d0:	c8 95       	lpm
    21d2:	c8 95       	lpm
    21d4:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <lcd_putc+0x36a>
    if( __padding ==  7 )  _NOP7();
    if( __padding ==  8 )  _NOP8();
    if( __padding ==  9 )  _NOP9();
    if( __padding == 10 ) _NOP10();
    if( __padding == 11 ) _NOP11();
    if( __padding == 12 ) _NOP12();
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	af 81       	ldd	r26, Y+7	; 0x07
    21de:	b8 85       	ldd	r27, Y+8	; 0x08
    21e0:	0c 97       	sbiw	r24, 0x0c	; 12
    21e2:	a1 05       	cpc	r26, r1
    21e4:	b1 05       	cpc	r27, r1
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <lcd_putc+0x382>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    21e8:	c8 95       	lpm
    21ea:	c8 95       	lpm
    21ec:	c8 95       	lpm
    21ee:	c8 95       	lpm
	 
	 
	_delay_us(2);
	
	
}
    21f0:	00 00       	nop
    21f2:	64 96       	adiw	r28, 0x14	; 20
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <lcd_init>:


void lcd_init(void)
{
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	LCD_Dir = 0xFD;								/* Make LCD port direction as o/p */
    220c:	87 e3       	ldi	r24, 0x37	; 55
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	2d ef       	ldi	r18, 0xFD	; 253
    2212:	fc 01       	movw	r30, r24
    2214:	20 83       	st	Z, r18
	delay(16000);								/* LCD Power ON delay always >15ms */
    2216:	80 ec       	ldi	r24, 0xC0	; 192
    2218:	9c ea       	ldi	r25, 0xAC	; 172
    221a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_delayFourCycles>
	
	lcd_command(0x02);							/* send for 4 bit initialization of LCD  */
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
	lcd_command(LCD_FUNCTION_4BIT_2LINES);		/* 2 line, 5*7 matrix in 4-bit mode */
    2224:	88 e2       	ldi	r24, 0x28	; 40
    2226:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
	lcd_command(LCD_DISP_ON);					/* Display on cursor off*/
    222a:	8c e0       	ldi	r24, 0x0C	; 12
    222c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
	lcd_command(LCD_ENTRY_INC_);				/* Increment cursor (shift cursor to right)*/
    2230:	86 e0       	ldi	r24, 0x06	; 6
    2232:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
	lcd_command(0x01);							/* Clear display screen*/
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
    // Display with KS0073 controller requires special commands for enabling 4 line mode //
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      // function set: display lines  
    223c:	88 e2       	ldi	r24, 0x28	; 40
    223e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              // display off                  
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
    lcd_clrscr();                           // display clear                 
    2248:	0e 94 85 11 	call	0x230a	; 0x230a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          // set entry mode               
    224c:	86 e0       	ldi	r24, 0x06	; 6
    224e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
    lcd_command(LCD_DISP_ON);      
    2252:	8c e0       	ldi	r24, 0x0C	; 12
    2254:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>


	
}
    2258:	00 00       	nop
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <lcd_puts>:



void lcd_puts(char *str)		/* Send string to LCD function */
{
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	00 d0       	rcall	.+0      	; 0x2266 <lcd_puts+0x6>
    2266:	00 d0       	rcall	.+0      	; 0x2268 <lcd_puts+0x8>
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2270:	1a 82       	std	Y+2, r1	; 0x02
    2272:	19 82       	std	Y+1, r1	; 0x01
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <lcd_puts+0x34>
	{
		lcd_putc(str[i]);
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	3c 81       	ldd	r19, Y+4	; 0x04
    227e:	82 0f       	add	r24, r18
    2280:	93 1f       	adc	r25, r19
    2282:	fc 01       	movw	r30, r24
    2284:	80 81       	ld	r24, Z
    2286:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <lcd_putc>


void lcd_puts(char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	2b 81       	ldd	r18, Y+3	; 0x03
    229a:	3c 81       	ldd	r19, Y+4	; 0x04
    229c:	82 0f       	add	r24, r18
    229e:	93 1f       	adc	r25, r19
    22a0:	fc 01       	movw	r30, r24
    22a2:	80 81       	ld	r24, Z
    22a4:	88 23       	and	r24, r24
    22a6:	39 f7       	brne	.-50     	; 0x2276 <lcd_puts+0x16>
	{
		lcd_putc(str[i]);
	}
}
    22a8:	00 00       	nop
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <lcd_gotoxy>:
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/

void lcd_gotoxy(uint8_t x, uint8_t y)
{
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	00 d0       	rcall	.+0      	; 0x22be <lcd_gotoxy+0x6>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	6a 83       	std	Y+2, r22	; 0x02
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	88 23       	and	r24, r24
    22ca:	29 f4       	brne	.+10     	; 0x22d6 <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	80 58       	subi	r24, 0x80	; 128
    22d0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <lcd_gotoxy+0x46>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	29 f4       	brne	.+10     	; 0x22e6 <lcd_gotoxy+0x2e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	80 54       	subi	r24, 0x40	; 64
    22e0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
    22e4:	0c c0       	rjmp	.+24     	; 0x22fe <lcd_gotoxy+0x46>
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	29 f4       	brne	.+10     	; 0x22f6 <lcd_gotoxy+0x3e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8c 56       	subi	r24, 0x6C	; 108
    22f0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
    22f4:	04 c0       	rjmp	.+8      	; 0x22fe <lcd_gotoxy+0x46>
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	8c 52       	subi	r24, 0x2C	; 44
    22fa:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
#endif

}/* lcd_gotoxy */
    22fe:	00 00       	nop
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	08 95       	ret

0000230a <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);   //0
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <lcd_command>
}
    2318:	00 00       	nop
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <__subsf3>:
    2320:	50 58       	subi	r21, 0x80	; 128

00002322 <__addsf3>:
    2322:	bb 27       	eor	r27, r27
    2324:	aa 27       	eor	r26, r26
    2326:	0e 94 a8 11 	call	0x2350	; 0x2350 <__addsf3x>
    232a:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_round>
    232e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    2332:	38 f0       	brcs	.+14     	; 0x2342 <__addsf3+0x20>
    2334:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    2338:	20 f0       	brcs	.+8      	; 0x2342 <__addsf3+0x20>
    233a:	39 f4       	brne	.+14     	; 0x234a <__addsf3+0x28>
    233c:	9f 3f       	cpi	r25, 0xFF	; 255
    233e:	19 f4       	brne	.+6      	; 0x2346 <__addsf3+0x24>
    2340:	26 f4       	brtc	.+8      	; 0x234a <__addsf3+0x28>
    2342:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_nan>
    2346:	0e f4       	brtc	.+2      	; 0x234a <__addsf3+0x28>
    2348:	e0 95       	com	r30
    234a:	e7 fb       	bst	r30, 7
    234c:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_inf>

00002350 <__addsf3x>:
    2350:	e9 2f       	mov	r30, r25
    2352:	0e 94 03 13 	call	0x2606	; 0x2606 <__fp_split3>
    2356:	58 f3       	brcs	.-42     	; 0x232e <__addsf3+0xc>
    2358:	ba 17       	cp	r27, r26
    235a:	62 07       	cpc	r22, r18
    235c:	73 07       	cpc	r23, r19
    235e:	84 07       	cpc	r24, r20
    2360:	95 07       	cpc	r25, r21
    2362:	20 f0       	brcs	.+8      	; 0x236c <__addsf3x+0x1c>
    2364:	79 f4       	brne	.+30     	; 0x2384 <__addsf3x+0x34>
    2366:	a6 f5       	brtc	.+104    	; 0x23d0 <__addsf3x+0x80>
    2368:	0c 94 25 13 	jmp	0x264a	; 0x264a <__fp_zero>
    236c:	0e f4       	brtc	.+2      	; 0x2370 <__addsf3x+0x20>
    236e:	e0 95       	com	r30
    2370:	0b 2e       	mov	r0, r27
    2372:	ba 2f       	mov	r27, r26
    2374:	a0 2d       	mov	r26, r0
    2376:	0b 01       	movw	r0, r22
    2378:	b9 01       	movw	r22, r18
    237a:	90 01       	movw	r18, r0
    237c:	0c 01       	movw	r0, r24
    237e:	ca 01       	movw	r24, r20
    2380:	a0 01       	movw	r20, r0
    2382:	11 24       	eor	r1, r1
    2384:	ff 27       	eor	r31, r31
    2386:	59 1b       	sub	r21, r25
    2388:	99 f0       	breq	.+38     	; 0x23b0 <__addsf3x+0x60>
    238a:	59 3f       	cpi	r21, 0xF9	; 249
    238c:	50 f4       	brcc	.+20     	; 0x23a2 <__addsf3x+0x52>
    238e:	50 3e       	cpi	r21, 0xE0	; 224
    2390:	68 f1       	brcs	.+90     	; 0x23ec <__addsf3x+0x9c>
    2392:	1a 16       	cp	r1, r26
    2394:	f0 40       	sbci	r31, 0x00	; 0
    2396:	a2 2f       	mov	r26, r18
    2398:	23 2f       	mov	r18, r19
    239a:	34 2f       	mov	r19, r20
    239c:	44 27       	eor	r20, r20
    239e:	58 5f       	subi	r21, 0xF8	; 248
    23a0:	f3 cf       	rjmp	.-26     	; 0x2388 <__addsf3x+0x38>
    23a2:	46 95       	lsr	r20
    23a4:	37 95       	ror	r19
    23a6:	27 95       	ror	r18
    23a8:	a7 95       	ror	r26
    23aa:	f0 40       	sbci	r31, 0x00	; 0
    23ac:	53 95       	inc	r21
    23ae:	c9 f7       	brne	.-14     	; 0x23a2 <__addsf3x+0x52>
    23b0:	7e f4       	brtc	.+30     	; 0x23d0 <__addsf3x+0x80>
    23b2:	1f 16       	cp	r1, r31
    23b4:	ba 0b       	sbc	r27, r26
    23b6:	62 0b       	sbc	r22, r18
    23b8:	73 0b       	sbc	r23, r19
    23ba:	84 0b       	sbc	r24, r20
    23bc:	ba f0       	brmi	.+46     	; 0x23ec <__addsf3x+0x9c>
    23be:	91 50       	subi	r25, 0x01	; 1
    23c0:	a1 f0       	breq	.+40     	; 0x23ea <__addsf3x+0x9a>
    23c2:	ff 0f       	add	r31, r31
    23c4:	bb 1f       	adc	r27, r27
    23c6:	66 1f       	adc	r22, r22
    23c8:	77 1f       	adc	r23, r23
    23ca:	88 1f       	adc	r24, r24
    23cc:	c2 f7       	brpl	.-16     	; 0x23be <__addsf3x+0x6e>
    23ce:	0e c0       	rjmp	.+28     	; 0x23ec <__addsf3x+0x9c>
    23d0:	ba 0f       	add	r27, r26
    23d2:	62 1f       	adc	r22, r18
    23d4:	73 1f       	adc	r23, r19
    23d6:	84 1f       	adc	r24, r20
    23d8:	48 f4       	brcc	.+18     	; 0x23ec <__addsf3x+0x9c>
    23da:	87 95       	ror	r24
    23dc:	77 95       	ror	r23
    23de:	67 95       	ror	r22
    23e0:	b7 95       	ror	r27
    23e2:	f7 95       	ror	r31
    23e4:	9e 3f       	cpi	r25, 0xFE	; 254
    23e6:	08 f0       	brcs	.+2      	; 0x23ea <__addsf3x+0x9a>
    23e8:	b0 cf       	rjmp	.-160    	; 0x234a <__addsf3+0x28>
    23ea:	93 95       	inc	r25
    23ec:	88 0f       	add	r24, r24
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <__addsf3x+0xa2>
    23f0:	99 27       	eor	r25, r25
    23f2:	ee 0f       	add	r30, r30
    23f4:	97 95       	ror	r25
    23f6:	87 95       	ror	r24
    23f8:	08 95       	ret

000023fa <__divsf3>:
    23fa:	0e 94 11 12 	call	0x2422	; 0x2422 <__divsf3x>
    23fe:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_round>
    2402:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    2406:	58 f0       	brcs	.+22     	; 0x241e <__divsf3+0x24>
    2408:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    240c:	40 f0       	brcs	.+16     	; 0x241e <__divsf3+0x24>
    240e:	29 f4       	brne	.+10     	; 0x241a <__divsf3+0x20>
    2410:	5f 3f       	cpi	r21, 0xFF	; 255
    2412:	29 f0       	breq	.+10     	; 0x241e <__divsf3+0x24>
    2414:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_inf>
    2418:	51 11       	cpse	r21, r1
    241a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__fp_szero>
    241e:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_nan>

00002422 <__divsf3x>:
    2422:	0e 94 03 13 	call	0x2606	; 0x2606 <__fp_split3>
    2426:	68 f3       	brcs	.-38     	; 0x2402 <__divsf3+0x8>

00002428 <__divsf3_pse>:
    2428:	99 23       	and	r25, r25
    242a:	b1 f3       	breq	.-20     	; 0x2418 <__divsf3+0x1e>
    242c:	55 23       	and	r21, r21
    242e:	91 f3       	breq	.-28     	; 0x2414 <__divsf3+0x1a>
    2430:	95 1b       	sub	r25, r21
    2432:	55 0b       	sbc	r21, r21
    2434:	bb 27       	eor	r27, r27
    2436:	aa 27       	eor	r26, r26
    2438:	62 17       	cp	r22, r18
    243a:	73 07       	cpc	r23, r19
    243c:	84 07       	cpc	r24, r20
    243e:	38 f0       	brcs	.+14     	; 0x244e <__divsf3_pse+0x26>
    2440:	9f 5f       	subi	r25, 0xFF	; 255
    2442:	5f 4f       	sbci	r21, 0xFF	; 255
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	44 1f       	adc	r20, r20
    244a:	aa 1f       	adc	r26, r26
    244c:	a9 f3       	breq	.-22     	; 0x2438 <__divsf3_pse+0x10>
    244e:	35 d0       	rcall	.+106    	; 0x24ba <__divsf3_pse+0x92>
    2450:	0e 2e       	mov	r0, r30
    2452:	3a f0       	brmi	.+14     	; 0x2462 <__divsf3_pse+0x3a>
    2454:	e0 e8       	ldi	r30, 0x80	; 128
    2456:	32 d0       	rcall	.+100    	; 0x24bc <__divsf3_pse+0x94>
    2458:	91 50       	subi	r25, 0x01	; 1
    245a:	50 40       	sbci	r21, 0x00	; 0
    245c:	e6 95       	lsr	r30
    245e:	00 1c       	adc	r0, r0
    2460:	ca f7       	brpl	.-14     	; 0x2454 <__divsf3_pse+0x2c>
    2462:	2b d0       	rcall	.+86     	; 0x24ba <__divsf3_pse+0x92>
    2464:	fe 2f       	mov	r31, r30
    2466:	29 d0       	rcall	.+82     	; 0x24ba <__divsf3_pse+0x92>
    2468:	66 0f       	add	r22, r22
    246a:	77 1f       	adc	r23, r23
    246c:	88 1f       	adc	r24, r24
    246e:	bb 1f       	adc	r27, r27
    2470:	26 17       	cp	r18, r22
    2472:	37 07       	cpc	r19, r23
    2474:	48 07       	cpc	r20, r24
    2476:	ab 07       	cpc	r26, r27
    2478:	b0 e8       	ldi	r27, 0x80	; 128
    247a:	09 f0       	breq	.+2      	; 0x247e <__divsf3_pse+0x56>
    247c:	bb 0b       	sbc	r27, r27
    247e:	80 2d       	mov	r24, r0
    2480:	bf 01       	movw	r22, r30
    2482:	ff 27       	eor	r31, r31
    2484:	93 58       	subi	r25, 0x83	; 131
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
    2488:	3a f0       	brmi	.+14     	; 0x2498 <__divsf3_pse+0x70>
    248a:	9e 3f       	cpi	r25, 0xFE	; 254
    248c:	51 05       	cpc	r21, r1
    248e:	78 f0       	brcs	.+30     	; 0x24ae <__divsf3_pse+0x86>
    2490:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_inf>
    2494:	0c 94 26 13 	jmp	0x264c	; 0x264c <__fp_szero>
    2498:	5f 3f       	cpi	r21, 0xFF	; 255
    249a:	e4 f3       	brlt	.-8      	; 0x2494 <__divsf3_pse+0x6c>
    249c:	98 3e       	cpi	r25, 0xE8	; 232
    249e:	d4 f3       	brlt	.-12     	; 0x2494 <__divsf3_pse+0x6c>
    24a0:	86 95       	lsr	r24
    24a2:	77 95       	ror	r23
    24a4:	67 95       	ror	r22
    24a6:	b7 95       	ror	r27
    24a8:	f7 95       	ror	r31
    24aa:	9f 5f       	subi	r25, 0xFF	; 255
    24ac:	c9 f7       	brne	.-14     	; 0x24a0 <__divsf3_pse+0x78>
    24ae:	88 0f       	add	r24, r24
    24b0:	91 1d       	adc	r25, r1
    24b2:	96 95       	lsr	r25
    24b4:	87 95       	ror	r24
    24b6:	97 f9       	bld	r25, 7
    24b8:	08 95       	ret
    24ba:	e1 e0       	ldi	r30, 0x01	; 1
    24bc:	66 0f       	add	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	88 1f       	adc	r24, r24
    24c2:	bb 1f       	adc	r27, r27
    24c4:	62 17       	cp	r22, r18
    24c6:	73 07       	cpc	r23, r19
    24c8:	84 07       	cpc	r24, r20
    24ca:	ba 07       	cpc	r27, r26
    24cc:	20 f0       	brcs	.+8      	; 0x24d6 <__divsf3_pse+0xae>
    24ce:	62 1b       	sub	r22, r18
    24d0:	73 0b       	sbc	r23, r19
    24d2:	84 0b       	sbc	r24, r20
    24d4:	ba 0b       	sbc	r27, r26
    24d6:	ee 1f       	adc	r30, r30
    24d8:	88 f7       	brcc	.-30     	; 0x24bc <__divsf3_pse+0x94>
    24da:	e0 95       	com	r30
    24dc:	08 95       	ret

000024de <__fixunssfsi>:
    24de:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fp_splitA>
    24e2:	88 f0       	brcs	.+34     	; 0x2506 <__fixunssfsi+0x28>
    24e4:	9f 57       	subi	r25, 0x7F	; 127
    24e6:	98 f0       	brcs	.+38     	; 0x250e <__fixunssfsi+0x30>
    24e8:	b9 2f       	mov	r27, r25
    24ea:	99 27       	eor	r25, r25
    24ec:	b7 51       	subi	r27, 0x17	; 23
    24ee:	b0 f0       	brcs	.+44     	; 0x251c <__fixunssfsi+0x3e>
    24f0:	e1 f0       	breq	.+56     	; 0x252a <__fixunssfsi+0x4c>
    24f2:	66 0f       	add	r22, r22
    24f4:	77 1f       	adc	r23, r23
    24f6:	88 1f       	adc	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	1a f0       	brmi	.+6      	; 0x2502 <__fixunssfsi+0x24>
    24fc:	ba 95       	dec	r27
    24fe:	c9 f7       	brne	.-14     	; 0x24f2 <__fixunssfsi+0x14>
    2500:	14 c0       	rjmp	.+40     	; 0x252a <__fixunssfsi+0x4c>
    2502:	b1 30       	cpi	r27, 0x01	; 1
    2504:	91 f0       	breq	.+36     	; 0x252a <__fixunssfsi+0x4c>
    2506:	0e 94 25 13 	call	0x264a	; 0x264a <__fp_zero>
    250a:	b1 e0       	ldi	r27, 0x01	; 1
    250c:	08 95       	ret
    250e:	0c 94 25 13 	jmp	0x264a	; 0x264a <__fp_zero>
    2512:	67 2f       	mov	r22, r23
    2514:	78 2f       	mov	r23, r24
    2516:	88 27       	eor	r24, r24
    2518:	b8 5f       	subi	r27, 0xF8	; 248
    251a:	39 f0       	breq	.+14     	; 0x252a <__fixunssfsi+0x4c>
    251c:	b9 3f       	cpi	r27, 0xF9	; 249
    251e:	cc f3       	brlt	.-14     	; 0x2512 <__fixunssfsi+0x34>
    2520:	86 95       	lsr	r24
    2522:	77 95       	ror	r23
    2524:	67 95       	ror	r22
    2526:	b3 95       	inc	r27
    2528:	d9 f7       	brne	.-10     	; 0x2520 <__fixunssfsi+0x42>
    252a:	3e f4       	brtc	.+14     	; 0x253a <__fixunssfsi+0x5c>
    252c:	90 95       	com	r25
    252e:	80 95       	com	r24
    2530:	70 95       	com	r23
    2532:	61 95       	neg	r22
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	8f 4f       	sbci	r24, 0xFF	; 255
    2538:	9f 4f       	sbci	r25, 0xFF	; 255
    253a:	08 95       	ret

0000253c <__floatunsisf>:
    253c:	e8 94       	clt
    253e:	09 c0       	rjmp	.+18     	; 0x2552 <__floatsisf+0x12>

00002540 <__floatsisf>:
    2540:	97 fb       	bst	r25, 7
    2542:	3e f4       	brtc	.+14     	; 0x2552 <__floatsisf+0x12>
    2544:	90 95       	com	r25
    2546:	80 95       	com	r24
    2548:	70 95       	com	r23
    254a:	61 95       	neg	r22
    254c:	7f 4f       	sbci	r23, 0xFF	; 255
    254e:	8f 4f       	sbci	r24, 0xFF	; 255
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	99 23       	and	r25, r25
    2554:	a9 f0       	breq	.+42     	; 0x2580 <__floatsisf+0x40>
    2556:	f9 2f       	mov	r31, r25
    2558:	96 e9       	ldi	r25, 0x96	; 150
    255a:	bb 27       	eor	r27, r27
    255c:	93 95       	inc	r25
    255e:	f6 95       	lsr	r31
    2560:	87 95       	ror	r24
    2562:	77 95       	ror	r23
    2564:	67 95       	ror	r22
    2566:	b7 95       	ror	r27
    2568:	f1 11       	cpse	r31, r1
    256a:	f8 cf       	rjmp	.-16     	; 0x255c <__floatsisf+0x1c>
    256c:	fa f4       	brpl	.+62     	; 0x25ac <__floatsisf+0x6c>
    256e:	bb 0f       	add	r27, r27
    2570:	11 f4       	brne	.+4      	; 0x2576 <__floatsisf+0x36>
    2572:	60 ff       	sbrs	r22, 0
    2574:	1b c0       	rjmp	.+54     	; 0x25ac <__floatsisf+0x6c>
    2576:	6f 5f       	subi	r22, 0xFF	; 255
    2578:	7f 4f       	sbci	r23, 0xFF	; 255
    257a:	8f 4f       	sbci	r24, 0xFF	; 255
    257c:	9f 4f       	sbci	r25, 0xFF	; 255
    257e:	16 c0       	rjmp	.+44     	; 0x25ac <__floatsisf+0x6c>
    2580:	88 23       	and	r24, r24
    2582:	11 f0       	breq	.+4      	; 0x2588 <__floatsisf+0x48>
    2584:	96 e9       	ldi	r25, 0x96	; 150
    2586:	11 c0       	rjmp	.+34     	; 0x25aa <__floatsisf+0x6a>
    2588:	77 23       	and	r23, r23
    258a:	21 f0       	breq	.+8      	; 0x2594 <__floatsisf+0x54>
    258c:	9e e8       	ldi	r25, 0x8E	; 142
    258e:	87 2f       	mov	r24, r23
    2590:	76 2f       	mov	r23, r22
    2592:	05 c0       	rjmp	.+10     	; 0x259e <__floatsisf+0x5e>
    2594:	66 23       	and	r22, r22
    2596:	71 f0       	breq	.+28     	; 0x25b4 <__floatsisf+0x74>
    2598:	96 e8       	ldi	r25, 0x86	; 134
    259a:	86 2f       	mov	r24, r22
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	2a f0       	brmi	.+10     	; 0x25ac <__floatsisf+0x6c>
    25a2:	9a 95       	dec	r25
    25a4:	66 0f       	add	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	88 1f       	adc	r24, r24
    25aa:	da f7       	brpl	.-10     	; 0x25a2 <__floatsisf+0x62>
    25ac:	88 0f       	add	r24, r24
    25ae:	96 95       	lsr	r25
    25b0:	87 95       	ror	r24
    25b2:	97 f9       	bld	r25, 7
    25b4:	08 95       	ret

000025b6 <__fp_inf>:
    25b6:	97 f9       	bld	r25, 7
    25b8:	9f 67       	ori	r25, 0x7F	; 127
    25ba:	80 e8       	ldi	r24, 0x80	; 128
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	08 95       	ret

000025c2 <__fp_nan>:
    25c2:	9f ef       	ldi	r25, 0xFF	; 255
    25c4:	80 ec       	ldi	r24, 0xC0	; 192
    25c6:	08 95       	ret

000025c8 <__fp_pscA>:
    25c8:	00 24       	eor	r0, r0
    25ca:	0a 94       	dec	r0
    25cc:	16 16       	cp	r1, r22
    25ce:	17 06       	cpc	r1, r23
    25d0:	18 06       	cpc	r1, r24
    25d2:	09 06       	cpc	r0, r25
    25d4:	08 95       	ret

000025d6 <__fp_pscB>:
    25d6:	00 24       	eor	r0, r0
    25d8:	0a 94       	dec	r0
    25da:	12 16       	cp	r1, r18
    25dc:	13 06       	cpc	r1, r19
    25de:	14 06       	cpc	r1, r20
    25e0:	05 06       	cpc	r0, r21
    25e2:	08 95       	ret

000025e4 <__fp_round>:
    25e4:	09 2e       	mov	r0, r25
    25e6:	03 94       	inc	r0
    25e8:	00 0c       	add	r0, r0
    25ea:	11 f4       	brne	.+4      	; 0x25f0 <__fp_round+0xc>
    25ec:	88 23       	and	r24, r24
    25ee:	52 f0       	brmi	.+20     	; 0x2604 <__fp_round+0x20>
    25f0:	bb 0f       	add	r27, r27
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fp_round+0x20>
    25f4:	bf 2b       	or	r27, r31
    25f6:	11 f4       	brne	.+4      	; 0x25fc <__fp_round+0x18>
    25f8:	60 ff       	sbrs	r22, 0
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <__fp_round+0x20>
    25fc:	6f 5f       	subi	r22, 0xFF	; 255
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	8f 4f       	sbci	r24, 0xFF	; 255
    2602:	9f 4f       	sbci	r25, 0xFF	; 255
    2604:	08 95       	ret

00002606 <__fp_split3>:
    2606:	57 fd       	sbrc	r21, 7
    2608:	90 58       	subi	r25, 0x80	; 128
    260a:	44 0f       	add	r20, r20
    260c:	55 1f       	adc	r21, r21
    260e:	59 f0       	breq	.+22     	; 0x2626 <__fp_splitA+0x10>
    2610:	5f 3f       	cpi	r21, 0xFF	; 255
    2612:	71 f0       	breq	.+28     	; 0x2630 <__fp_splitA+0x1a>
    2614:	47 95       	ror	r20

00002616 <__fp_splitA>:
    2616:	88 0f       	add	r24, r24
    2618:	97 fb       	bst	r25, 7
    261a:	99 1f       	adc	r25, r25
    261c:	61 f0       	breq	.+24     	; 0x2636 <__fp_splitA+0x20>
    261e:	9f 3f       	cpi	r25, 0xFF	; 255
    2620:	79 f0       	breq	.+30     	; 0x2640 <__fp_splitA+0x2a>
    2622:	87 95       	ror	r24
    2624:	08 95       	ret
    2626:	12 16       	cp	r1, r18
    2628:	13 06       	cpc	r1, r19
    262a:	14 06       	cpc	r1, r20
    262c:	55 1f       	adc	r21, r21
    262e:	f2 cf       	rjmp	.-28     	; 0x2614 <__fp_split3+0xe>
    2630:	46 95       	lsr	r20
    2632:	f1 df       	rcall	.-30     	; 0x2616 <__fp_splitA>
    2634:	08 c0       	rjmp	.+16     	; 0x2646 <__fp_splitA+0x30>
    2636:	16 16       	cp	r1, r22
    2638:	17 06       	cpc	r1, r23
    263a:	18 06       	cpc	r1, r24
    263c:	99 1f       	adc	r25, r25
    263e:	f1 cf       	rjmp	.-30     	; 0x2622 <__fp_splitA+0xc>
    2640:	86 95       	lsr	r24
    2642:	71 05       	cpc	r23, r1
    2644:	61 05       	cpc	r22, r1
    2646:	08 94       	sec
    2648:	08 95       	ret

0000264a <__fp_zero>:
    264a:	e8 94       	clt

0000264c <__fp_szero>:
    264c:	bb 27       	eor	r27, r27
    264e:	66 27       	eor	r22, r22
    2650:	77 27       	eor	r23, r23
    2652:	cb 01       	movw	r24, r22
    2654:	97 f9       	bld	r25, 7
    2656:	08 95       	ret

00002658 <__mulsf3>:
    2658:	0e 94 3f 13 	call	0x267e	; 0x267e <__mulsf3x>
    265c:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_round>
    2660:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    2664:	38 f0       	brcs	.+14     	; 0x2674 <__mulsf3+0x1c>
    2666:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    266a:	20 f0       	brcs	.+8      	; 0x2674 <__mulsf3+0x1c>
    266c:	95 23       	and	r25, r21
    266e:	11 f0       	breq	.+4      	; 0x2674 <__mulsf3+0x1c>
    2670:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_inf>
    2674:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_nan>
    2678:	11 24       	eor	r1, r1
    267a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__fp_szero>

0000267e <__mulsf3x>:
    267e:	0e 94 03 13 	call	0x2606	; 0x2606 <__fp_split3>
    2682:	70 f3       	brcs	.-36     	; 0x2660 <__mulsf3+0x8>

00002684 <__mulsf3_pse>:
    2684:	95 9f       	mul	r25, r21
    2686:	c1 f3       	breq	.-16     	; 0x2678 <__mulsf3+0x20>
    2688:	95 0f       	add	r25, r21
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	55 1f       	adc	r21, r21
    268e:	62 9f       	mul	r22, r18
    2690:	f0 01       	movw	r30, r0
    2692:	72 9f       	mul	r23, r18
    2694:	bb 27       	eor	r27, r27
    2696:	f0 0d       	add	r31, r0
    2698:	b1 1d       	adc	r27, r1
    269a:	63 9f       	mul	r22, r19
    269c:	aa 27       	eor	r26, r26
    269e:	f0 0d       	add	r31, r0
    26a0:	b1 1d       	adc	r27, r1
    26a2:	aa 1f       	adc	r26, r26
    26a4:	64 9f       	mul	r22, r20
    26a6:	66 27       	eor	r22, r22
    26a8:	b0 0d       	add	r27, r0
    26aa:	a1 1d       	adc	r26, r1
    26ac:	66 1f       	adc	r22, r22
    26ae:	82 9f       	mul	r24, r18
    26b0:	22 27       	eor	r18, r18
    26b2:	b0 0d       	add	r27, r0
    26b4:	a1 1d       	adc	r26, r1
    26b6:	62 1f       	adc	r22, r18
    26b8:	73 9f       	mul	r23, r19
    26ba:	b0 0d       	add	r27, r0
    26bc:	a1 1d       	adc	r26, r1
    26be:	62 1f       	adc	r22, r18
    26c0:	83 9f       	mul	r24, r19
    26c2:	a0 0d       	add	r26, r0
    26c4:	61 1d       	adc	r22, r1
    26c6:	22 1f       	adc	r18, r18
    26c8:	74 9f       	mul	r23, r20
    26ca:	33 27       	eor	r19, r19
    26cc:	a0 0d       	add	r26, r0
    26ce:	61 1d       	adc	r22, r1
    26d0:	23 1f       	adc	r18, r19
    26d2:	84 9f       	mul	r24, r20
    26d4:	60 0d       	add	r22, r0
    26d6:	21 1d       	adc	r18, r1
    26d8:	82 2f       	mov	r24, r18
    26da:	76 2f       	mov	r23, r22
    26dc:	6a 2f       	mov	r22, r26
    26de:	11 24       	eor	r1, r1
    26e0:	9f 57       	subi	r25, 0x7F	; 127
    26e2:	50 40       	sbci	r21, 0x00	; 0
    26e4:	9a f0       	brmi	.+38     	; 0x270c <__mulsf3_pse+0x88>
    26e6:	f1 f0       	breq	.+60     	; 0x2724 <__mulsf3_pse+0xa0>
    26e8:	88 23       	and	r24, r24
    26ea:	4a f0       	brmi	.+18     	; 0x26fe <__mulsf3_pse+0x7a>
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	bb 1f       	adc	r27, r27
    26f2:	66 1f       	adc	r22, r22
    26f4:	77 1f       	adc	r23, r23
    26f6:	88 1f       	adc	r24, r24
    26f8:	91 50       	subi	r25, 0x01	; 1
    26fa:	50 40       	sbci	r21, 0x00	; 0
    26fc:	a9 f7       	brne	.-22     	; 0x26e8 <__mulsf3_pse+0x64>
    26fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2700:	51 05       	cpc	r21, r1
    2702:	80 f0       	brcs	.+32     	; 0x2724 <__mulsf3_pse+0xa0>
    2704:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_inf>
    2708:	0c 94 26 13 	jmp	0x264c	; 0x264c <__fp_szero>
    270c:	5f 3f       	cpi	r21, 0xFF	; 255
    270e:	e4 f3       	brlt	.-8      	; 0x2708 <__mulsf3_pse+0x84>
    2710:	98 3e       	cpi	r25, 0xE8	; 232
    2712:	d4 f3       	brlt	.-12     	; 0x2708 <__mulsf3_pse+0x84>
    2714:	86 95       	lsr	r24
    2716:	77 95       	ror	r23
    2718:	67 95       	ror	r22
    271a:	b7 95       	ror	r27
    271c:	f7 95       	ror	r31
    271e:	e7 95       	ror	r30
    2720:	9f 5f       	subi	r25, 0xFF	; 255
    2722:	c1 f7       	brne	.-16     	; 0x2714 <__mulsf3_pse+0x90>
    2724:	fe 2b       	or	r31, r30
    2726:	88 0f       	add	r24, r24
    2728:	91 1d       	adc	r25, r1
    272a:	96 95       	lsr	r25
    272c:	87 95       	ror	r24
    272e:	97 f9       	bld	r25, 7
    2730:	08 95       	ret

00002732 <itoa>:
    2732:	45 32       	cpi	r20, 0x25	; 37
    2734:	51 05       	cpc	r21, r1
    2736:	20 f4       	brcc	.+8      	; 0x2740 <itoa+0xe>
    2738:	42 30       	cpi	r20, 0x02	; 2
    273a:	10 f0       	brcs	.+4      	; 0x2740 <itoa+0xe>
    273c:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__itoa_ncheck>
    2740:	fb 01       	movw	r30, r22
    2742:	10 82       	st	Z, r1
    2744:	cb 01       	movw	r24, r22
    2746:	08 95       	ret

00002748 <__itoa_ncheck>:
    2748:	bb 27       	eor	r27, r27
    274a:	4a 30       	cpi	r20, 0x0A	; 10
    274c:	31 f4       	brne	.+12     	; 0x275a <__itoa_ncheck+0x12>
    274e:	99 23       	and	r25, r25
    2750:	22 f4       	brpl	.+8      	; 0x275a <__itoa_ncheck+0x12>
    2752:	bd e2       	ldi	r27, 0x2D	; 45
    2754:	90 95       	com	r25
    2756:	81 95       	neg	r24
    2758:	9f 4f       	sbci	r25, 0xFF	; 255
    275a:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__utoa_common>

0000275e <__utoa_ncheck>:
    275e:	bb 27       	eor	r27, r27

00002760 <__utoa_common>:
    2760:	fb 01       	movw	r30, r22
    2762:	55 27       	eor	r21, r21
    2764:	aa 27       	eor	r26, r26
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	aa 1f       	adc	r26, r26
    276c:	a4 17       	cp	r26, r20
    276e:	10 f0       	brcs	.+4      	; 0x2774 <__utoa_common+0x14>
    2770:	a4 1b       	sub	r26, r20
    2772:	83 95       	inc	r24
    2774:	50 51       	subi	r21, 0x10	; 16
    2776:	b9 f7       	brne	.-18     	; 0x2766 <__utoa_common+0x6>
    2778:	a0 5d       	subi	r26, 0xD0	; 208
    277a:	aa 33       	cpi	r26, 0x3A	; 58
    277c:	08 f0       	brcs	.+2      	; 0x2780 <__utoa_common+0x20>
    277e:	a9 5d       	subi	r26, 0xD9	; 217
    2780:	a1 93       	st	Z+, r26
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	79 f7       	brne	.-34     	; 0x2764 <__utoa_common+0x4>
    2786:	b1 11       	cpse	r27, r1
    2788:	b1 93       	st	Z+, r27
    278a:	11 92       	st	Z+, r1
    278c:	cb 01       	movw	r24, r22
    278e:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <strrev>

00002792 <strrev>:
    2792:	dc 01       	movw	r26, r24
    2794:	fc 01       	movw	r30, r24
    2796:	67 2f       	mov	r22, r23
    2798:	71 91       	ld	r23, Z+
    279a:	77 23       	and	r23, r23
    279c:	e1 f7       	brne	.-8      	; 0x2796 <strrev+0x4>
    279e:	32 97       	sbiw	r30, 0x02	; 2
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <strrev+0x18>
    27a2:	7c 91       	ld	r23, X
    27a4:	6d 93       	st	X+, r22
    27a6:	70 83       	st	Z, r23
    27a8:	62 91       	ld	r22, -Z
    27aa:	ae 17       	cp	r26, r30
    27ac:	bf 07       	cpc	r27, r31
    27ae:	c8 f3       	brcs	.-14     	; 0x27a2 <strrev+0x10>
    27b0:	08 95       	ret

000027b2 <eeprom_read_word>:
    27b2:	a8 e1       	ldi	r26, 0x18	; 24
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	42 e0       	ldi	r20, 0x02	; 2
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <eeprom_read_blraw>

000027be <eeprom_write_word>:
    27be:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <eeprom_write_byte>
    27c2:	27 2f       	mov	r18, r23
    27c4:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <eeprom_write_r18>

000027c8 <eeprom_read_block>:
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22

000027cc <eeprom_read_blraw>:
    27cc:	fc 01       	movw	r30, r24
    27ce:	e1 99       	sbic	0x1c, 1	; 28
    27d0:	fe cf       	rjmp	.-4      	; 0x27ce <eeprom_read_blraw+0x2>
    27d2:	06 c0       	rjmp	.+12     	; 0x27e0 <eeprom_read_blraw+0x14>
    27d4:	ff bb       	out	0x1f, r31	; 31
    27d6:	ee bb       	out	0x1e, r30	; 30
    27d8:	e0 9a       	sbi	0x1c, 0	; 28
    27da:	31 96       	adiw	r30, 0x01	; 1
    27dc:	0d b2       	in	r0, 0x1d	; 29
    27de:	0d 92       	st	X+, r0
    27e0:	41 50       	subi	r20, 0x01	; 1
    27e2:	50 40       	sbci	r21, 0x00	; 0
    27e4:	b8 f7       	brcc	.-18     	; 0x27d4 <eeprom_read_blraw+0x8>
    27e6:	08 95       	ret

000027e8 <eeprom_write_byte>:
    27e8:	26 2f       	mov	r18, r22

000027ea <eeprom_write_r18>:
    27ea:	e1 99       	sbic	0x1c, 1	; 28
    27ec:	fe cf       	rjmp	.-4      	; 0x27ea <eeprom_write_r18>
    27ee:	9f bb       	out	0x1f, r25	; 31
    27f0:	8e bb       	out	0x1e, r24	; 30
    27f2:	2d bb       	out	0x1d, r18	; 29
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	e2 9a       	sbi	0x1c, 2	; 28
    27fa:	e1 9a       	sbi	0x1c, 1	; 28
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	08 95       	ret

00002802 <_exit>:
    2802:	f8 94       	cli

00002804 <__stop_program>:
    2804:	ff cf       	rjmp	.-2      	; 0x2804 <__stop_program>
